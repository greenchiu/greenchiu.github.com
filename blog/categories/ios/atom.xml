<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Green]]></title>
  <link href="http://greenchiu.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://greenchiu.github.io/"/>
  <updated>2014-06-15T16:45:59+08:00</updated>
  <id>http://greenchiu.github.io/</id>
  <author>
    <name><![CDATA[Green Chiu]]></name>
    <email><![CDATA[handkid1986@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[WWDC2014] About the  XCode 6]]></title>
    <link href="http://greenchiu.github.io/blog/2014/06/15/wwdc2014-about-the-xcode-6/"/>
    <updated>2014-06-15T16:44:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2014/06/15/wwdc2014-about-the-xcode-6</id>
    <content type="html"><![CDATA[<p>What's New in XCode 6.
session 401</p>

<!--more-->


<p>一開始提了一拖拉庫的內容, 不過都只是快速帶過</p>

<h2>Playground</h2>

<p>Swift的互動模式, 可以在這邊直接驗證 swift 的程式是否符合預期, 適合拿來做驗證與嘗試, 在Live Rendering 只支援 framework + Iterface Builder 的情況下, playground 即時編譯的特性可以彌補 Live Rendering的缺點.</p>

<h2>Swift in Project</h2>

<p>在專案內使用 Swift, 如果是同一個專案下的話, ObjectC class 可以不用做任何的 import 動作就可以直接使用; 如果是其他的 framework 下的 class, 可以直接使用 <code>@import [frameworkName]</code> 或是 <code>#import "framework-Swift.h"</code>, 就可以載入 framework(module)內的 swift class.</p>

<h2>Test</h2>

<p>在 iOS8 中, 對於 TestCase 開始支援直接執行單一的 testMethod, 不需要在build test target.
搭配 <code>measureBlock</code> 可以測試該 test 所耗費的時間, 還可以設定時間來判斷這個 case 是否因為超出預期而被判定失敗來拜調整該程式的 proformance; 同時也可以直接使用 profile 來作更進一步的動作.</p>

<h2>Interface Builder</h2>

<p>Swift Live Rendering, 從使用 framework 的 swift class, 可以搭配 <code>@IBDesignable</code> 直接進行畫面的設計與調整; <code>@IBInspectable</code>更是改進了自定義View無法在 IB 中調整對應屬性, 以前在iOS沒有辦法做這件事情, 在 mac 上也還要多做處理使用起來也沒有這麼直觀. 比較可惜的是只有在 framework 的狀態下才能這樣使用.</p>

<p>Debug Selected Views 也可以快速的來對 View 做一些 debug 的動作, 就不用再等待慢慢的編譯完成後再 device/simulator 再進行.</p>

<p>Size-class, 就是簡單的操作, 可以客製不同 layout 的 autolayout.</p>

<h2>Debug View Hierarchy</h2>

<p>這個功能跟 <a href="http://revealapp.com/">Reveal</a> 很像, 不過用起來沒有Reveal那麼完善, 可以拿來做一些簡單的檢查, 再互動沒有反應或者是有些 view 莫名的不見得話, 用這個功能也許可以找到原因.</p>

<h3>小記</h3>

<p>不得不說新的xcode6 進步很多, 再 debug 方面也是大加分, 很期待正式版 release, 不過在beta crash的次數還是很讓人崩潰 Q_Q.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[WWDC2014] About The Adaptive App.]]></title>
    <link href="http://greenchiu.github.io/blog/2014/06/14/wwdc2014-about-the-adaptive-app/"/>
    <updated>2014-06-14T21:06:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2014/06/14/wwdc2014-about-the-adaptive-app</id>
    <content type="html"><![CDATA[<p>[Memo] Building Adaptive Apps with UIKit, Session 216</p>

<!--more-->


<h3>Size class</h3>

<p>在 iOS8 之前, 在開發過程中會有3個畫面的大小要去考慮, 並且還需要對 Protrait 跟 Landscape 做鄉對應的設計與調整.</p>

<p>而現在提出了一個新的概念 <code>Size class</code> 來描述現在 device 的 size(?) 與 oriention.</p>

<h4>What's the size class?</h4>

<p>size class 顧名思義的就是用 width x height 的概念, 來描述現在的畫面呈現的大小; 並且使用下面的描述來敘述現在的畫面大小.</p>

<ul>
<li>Compact (目前只有 iPhone 有使用到)</li>
<li>Regular</li>
</ul>


<p><img src="http://cl.ly/image/230z253x0e0o/Size%20Classes.jpg" width="600"></p>

<p>Apple 用兩個值來解釋現在顯示的 size; 已 iPhone 來說, 我們可以用 Compact x Regular 跟 Compact x Compact 來表示現在的 orientation 分別是 Protrait 以及 Landscope.</p>

<p>到這邊也許會有一點搞混, 也許會出現這樣的疑問 : <br/>
Q:在iPhone的時候, compact 的大小等於320嗎? <br/>
A:其實是不一定的, 這個數字是可以改變的.</p>

<p><code>Compact</code> &amp; <code>Regular</code> 與其說是一個數值, 其實應該要把它理解成一個狀態的敘述, 可以依照實際的需求去調整<code>UIView / UIViewController</code>的<code>size class</code>; 即便在原本的iPhone Protrait(320x568) 的畫面下, 你也可以把寬度定義成是 Regular, 讓他顯示分割畫面.</p>

<p><img src="http://cl.ly/image/3b1O391j0I3x/iOS%20Simulator%20Screen%20Shot%202014.6.14%20%E4%B8%8B%E5%8D%8811.31.03.png" width="320"></p>

<h4>UITraitCollection</h4>

<p>Apple 使用 <code>UITraitCollection</code> 是用來表示現在 View 的 size class; 在 iOS8 中, UIView &amp; UIViewController 都實作了一個新的 protocol <code>UITraitEnvironment</code>, 來描述這個底下的 view or subviews 的 traitCollection.</p>

<h4>Asset Catalogs</h4>

<p>Asset Catalogs 同使也增加了對應的功能, 讓畫面在不同的 sizs class 使用不同大小的圖片.</p>

<p>在 asset catalogs 的 inspector 中, 多出了 width &amp; height 的選項, 可以依照實際的需求增加圖檔</p>

<p><img src="http://cl.ly/image/0Z1t0m0e123M/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-06-14%20%E4%B8%8B%E5%8D%8811.46.08.png"></p>

<p>關於 showViewController 的部份, 跑進去 UIViewController.h 看了一下, 比較像是最後找到了一樣有實作 showViewController:sender: 這個 method 的 UISplitViewController 物件, 讓splitViewController 去處理相關的事情.</p>

<h2>小記</h2>

<p>Adaptive 這個概念是想要讓的 device 可以輕易的改變/判斷 UITraitCollection 的內容進而 Customize layout, 在圖片的支援上也是挺到位; 在 IB 上更是支援各個 size 可以先共用基本的 autolayout 最後在個別 customize, 搭配 preivew 功能更可以馬上知道是否符合需求.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UICollectionViewLayout好神奇]]></title>
    <link href="http://greenchiu.github.io/blog/2014/02/15/uicollectionviewlayouthao-shen-qi/"/>
    <updated>2014-02-15T22:17:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2014/02/15/uicollectionviewlayouthao-shen-qi</id>
    <content type="html"><![CDATA[<p>分享一下自己對於 UICollectionView 的看法, 僅供參考囉 ~</p>

<p>UICollectionView 是 iOS6 開始支援的功能, 不過只到前陣子我才真正的有接觸到; 我曾經以為 UICollectionView 是 UITableView 的進階版本, 嗯 ... 只能說我好傻好天真. UICollectionView 最厲害的地方應該是對 UICollectionViewCell 等等的 subviews 的 layout.</p>

<!-- more -->


<p>文件中, 其實也詳細的解釋了 UICollectionView 從 dataSource 取得資料後, 會交由 UICollectionViewLayout 來處理 layout 的動作, 如果沒有特別的設定, 大該只會用到 cell 大小不同, 多個 section 這樣的樣式(ex:iPad AppStore), 我也認為 UICollectionView 大該就這樣而已, 直到我真的去查了文件.</p>

<p>這邊可能就不多談怎麼客製化 UICollectionViewLayout, 說說這樣的設計模式好了; AutoLayout 想必大家都不陌生, 很多人也因為 AutoLayout 認為 Apple 要推出不同尺寸的 Device, 但是比起 AutoLayout, 我覺得 UICollectionView 將 layout 的邏輯分離出來, 更適合再不同尺寸的 Device 上來使用.</p>

<p>我個人認為有兩個方面值得這樣去嘗試:</p>

<ul>
<li>易維護</li>
<li>客製化</li>
</ul>


<h4>易維護</h4>

<p>再開發專案的時候, Model 固定之後的通常都不會變動(一變動通常都是改很大就是), 大多數調整的都是排版或者是 view 的外觀; 排版通常會因為不同的長寬再變動或是一些比較特殊的需求, 這時候如果我們將排版跟 view分開來, 我們只要在對應的 class 去修改需要修改的內容, 讓 class 也更精簡.</p>

<h4>客製化</h4>

<p>在不同的大尺寸的 Device, 設計該尺寸下的排版邏輯, 可以減少因為特殊需求需要把功能相同的 class 複製或是建立一個 superclass 來繼承, 在分別寫各自的內容. 可以在各自的 layout class 內去設計對應的樣式, 減少不必的重複內容. 當有新的尺寸時, 擴充也較方便.</p>

<p>至於 Autolayout 的部份, 當然還是看個人需求去使用, 目前我的工作上是沒有碰到相關的應用, 所以也無法在這邊提供太多這方面的建議.</p>

<p>如果有什麼看法歡迎一起討論, 有錯誤也請提出來, 謝謝.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Core-Animation筆記]]></title>
    <link href="http://greenchiu.github.io/blog/2013/11/10/core-animationbi-ji/"/>
    <updated>2013-11-10T09:21:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2013/11/10/core-animationbi-ji</id>
    <content type="html"><![CDATA[<p>這次要來記錄一下<code>CoreAnimation</code>, core animation很實用也很簡單; 一般來說, UIView所提供的Animation已經可以提供大部分我們需要的效果, 不過如果想要用到更複雜, 比較特別的動畫, UIView Animation就沒辦法符合我們的需求.</p>

<!--more-->


<h2>CAAnimation</h2>

<p>CAAnimation 是 CoreAnimation 基礎的 Object, 而我們大多真正會使用的大該是下面五種繼承CAAnimttion的物件</p>

<ul>
<li>CAPropertyAnimation 主要使用 下面兩個subclass

<ul>
<li> CAKeyframeAnimation</li>
<li> CABasicAnimation</li>
</ul>
</li>
<li>CAAnimationGroup</li>
<li>CATransition</li>
<li>CATransaction</li>
</ul>


<p>其中CATransaction使用的方式跟其他四個比較不一樣, 不過也算是比較常用的 CoreAnimation物件; CATransition已經內建了幾種動畫的樣式, 例如相機開啟、水波以及垃圾桶的特效等等, 都可以直接運用CATransition來使用.</p>

<p>CAPropertyAnimation 的使用方式都是改變物件的property, 是使用keypath的方式來改變property(KVC), 在建立Animation的時候就要先給要變化的keypath</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>example </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CABasicAnimation</span> <span class="o">*</span><span class="n">anim</span> <span class="o">=</span> <span class="p">[</span><span class="n">CABasicAnimation</span> <span class="nl">animationWithKeyPath:</span><span class="s">@&quot;alpha&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">anim</span><span class="p">.</span><span class="n">fromValue</span> <span class="o">=</span> <span class="err">@</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">anim</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="err">@</span><span class="mi">1</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">[</span><span class="n">tagetLayer</span> <span class="nl">addAnimation:</span><span class="n">anima</span> <span class="nl">forKey:</span><span class="s">@&quot;anima&quot;</span><span class="p">]</span> <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在使用KVC在使用的時候, 改變內容都是以NSValue; 到帶入的NSValue型態可以參考這邊的<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreAnimation_guide/AnimatableProperties/AnimatableProperties.html#//apple_ref/doc/uid/TP40004514-CH11-SW1">文件</a></p>

<p>上面這樣就會有簡單動畫, layer的半透明會越來越明顯只到消失; 可以指定的變化的數值之外, 同時也可以指定Animation的時間以及動畫的速率方式, 分別是:</p>

<ul>
<li>duration</li>
<li>timimgFunction</li>
</ul>


<p>最後還有一個需要特別提到的部份, <code>fillMode</code>的部份, 可以特別注意一下, 必須要設成 <code>kCAFillModeForwards</code>, 不然在執行玩動畫後, 可能會回到原本的狀態.
而在Keyframe的部份, 也是相識的作法, 用 <code>values</code> 跟 <code>keyTimes</code>.</p>

<h2>CAAnimtaionGroup</h2>

<p>在使用Keyframe and basic animation的時候, 如果是一個一個加到 layer上面去, 會是依序加上去的順序去執行, 如果想要Animation是同時發生(concurrent)的話, 就需要搭配 CAAnimationGroup來使用.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CABasicAnimation</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">anim0</span> <span class="o">=</span> <span class="p">[</span><span class="n">CABasicAnimation</span> <span class="nl">animationWithKeyPath:</span><span class="s">@&quot;...&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">CAKeyframeAnimation</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">anim1</span> <span class="o">=</span> <span class="p">[</span><span class="n">CABasicAnimation</span> <span class="nl">animationWithKeyPath:</span><span class="s">@&quot;...&quot;</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">CAAnimationGroup</span> <span class="o">*</span><span class="n">animGroup</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAAnimationGroup</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">animGroup</span><span class="p">.</span><span class="n">animations</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="n">anim0</span><span class="p">,</span> <span class="n">anim1</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">[</span><span class="n">targetLayer</span> <span class="nl">addAnimation:</span><span class="n">animGroup</span> <span class="nl">forKey:</span><span class="s">@&quot;anima&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>CATransaction</h2>

<p>最後來提提CATransaction; 在運用CALayer的時候, 只要我們一修改frame, Layer就會開始呈現動畫,
而CATransaction是可以用來控制這些動畫的時間跟動畫速率, 跟UIView的Aniamtion用法有點像.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">CATransaction</span> <span class="n">begin</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">animated</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">CATransaction</span> <span class="nl">setValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">kCFBooleanTrue</span>
</span><span class='line'>                 <span class="nl">forKey:</span><span class="n">kCATransactionDisableActions</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">CATransaction</span> <span class="nl">setAnimationDuration:</span><span class="mf">.3f</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">self</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">clearColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">;</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">gradientLayer</span><span class="p">.</span><span class="n">colors</span> <span class="o">=</span> <span class="n">colors</span><span class="p">;</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">gradientLayer</span><span class="p">.</span><span class="n">locations</span> <span class="o">=</span> <span class="n">locations</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">CATransaction</span> <span class="n">commit</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>如果有有錯誤也請幫忙指正, 謝謝.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Xib來Layout]]></title>
    <link href="http://greenchiu.github.io/blog/2013/08/29/shi-yong-xiblai-layout/"/>
    <updated>2013-08-29T22:59:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2013/08/29/shi-yong-xiblai-layout</id>
    <content type="html"><![CDATA[<p><blockquote><p>最近在複習以前沒注意到的東西, 順便也對AutoLayout做了一點功課, 記錄一下如何使用Xib來快速做一些Layout的動作.</p></blockquote></p>

<p>(謎之音:這一段可以直接跳過, 不想看就直接往下吧)</p>

<p>對於大多數的iOS開發者應該都有使用過Interface Builder, 可能也習慣使用IB來做開發; 就個人而言, 其實我更習慣用程式碼來做layout的動作, 即使到了iOS5推出了<code>Storyboard</code>也沒有改變我的習慣; 最近在追iOS6的內容(相容要到5.0, you know),看到<code>AutoLayout</code>覺得這真的是一個很棒的功能, 方便、快速, 只是可能太多物件會有點亂(在Xib中), 但是使用Xib來製作就還沒上手的我來說是一個比較容易上手的方式, 順便也嘗試改變一下只用程式來做Layout, 試試看是否會比較快或者是兩個互相搭配有更好的開發方式.</p>

<!--more-->


<p>這次會記錄的內容會有</p>

<ul>
<li>使用Xib來定義一個UIView's Subclass.</li>
<li>在ViewController中, 不同的View使用不同的Xib載入內容.</li>
<li>使用Xib來定義UITableViewCell, 並直接讓UITableView使用.</li>
</ul>


<p>內容大多數會差不多, 不過有幾個比較特別的地方會特別點出來</p>

<h1>建立UIView subclass with Xib</h1>

<p>這邊會有下面幾個步驟</p>

<ul>
<li>建立並宣告一個UIView subclass.</li>
<li>為UIView subclass建立Xib並作連結.</li>
<li>建立UIView class實體的時候載入Xib內容.</li>
</ul>


<h3>Step. 1-1</h3>

<p>首先我們先建立一個Class <code>MyHeader</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>建立UIView subclass named MyHeader </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">@</span><span class="n">interface</span> <span class="n">MyHeader</span> <span class="o">:</span> <span class="n">UIView</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">titleLabel</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UIButton</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">clickButton</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">touchUpButton:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>上面的程式碼, 我在.h宣告了兩個property跟一個method, 前面加上<code>IBOutlet</code>、<code>IBAction</code>, 這兩個修飾字(是讓Class跟Xib溝通用的), 接下來新增Xib檔案讓MyHeader使用.</p>

<h3>Step. 1-2</h3>

<p>在Menu的File->New->File, 然後選擇iOS下的User Interface->Empty, 建立檔案並命名為<code>MyHeader</code>.(參考下圖)</p>

<p><img src="http://f.cl.ly/items/401e41120B1N410W0l32/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202013-08-30%20%E4%B8%8A%E5%8D%889.45.47.png"></p>

<p>接著開啟MyHeader.xib, 並增加一個UIView到畫面上, <strong>同時將這個View的class設定為<code>MyHeader</code></strong>, 在<code>MyHeader.h</code>中我有定義兩個視覺物件分別是一個Label跟一個Button, 所以在剛剛Xib的View我們接著建立Button跟Label, 完成後大該會跟下圖一樣. (這邊跟我們再使用UIViewController, 將 File's Owner的Class設定成我們的ViewController Class有點不同, 需要注意一下)</p>

<p><img src="http://cl.ly/image/0s323K0l443y/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202013-08-30%20%E4%B8%8A%E5%8D%889.48.36.png"></p>

<p>接著我們將<code>MyHeader.h</code>跟<code>MyHeader.xib</code>需要連接的property跟method連起來</p>

<p><img src="http://cl.ly/image/2e2D333v2e1Y/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202013-08-30%20%E4%B8%8A%E5%8D%8810.29.53.png"></p>

<p>這邊可以發現因為View是<code>MyHeader Class</code>, 所以在Connections Inspector上會有我們再Class中定義可以跟Xib連結的項目.</p>

<p>到這邊我們已經完成了Xib跟Class的基本設定, 接下來要回到程式的部份, 在建立MyHeader的時候讓MyHeader去載入Xib的內容.</p>

<h3>Step. 1-3</h3>

<p>在<code>MyHeader.m</code>中實作<code>init</code> method, 在<code>init</code>中我們可以使用兩種方式來載入Xib內容, 不過效果都是相同的.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>implement MyHeader's init method</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UINib</span> <span class="o">*</span><span class="n">nib</span> <span class="o">=</span> <span class="p">[</span><span class="n">UINib</span> <span class="nl">nibWithNibName:</span><span class="s">@&quot;MyHeader&quot;</span> <span class="nl">bundle:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="n">NSArray</span><span class="o">*</span> <span class="n">array</span><span class="p">;</span>
</span><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="n">nib</span> <span class="nl">instantiateWithOwner:</span><span class="nb">nil</span>
</span><span class='line'>                          <span class="nl">options:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">self</span> <span class="o">=</span> <span class="p">(</span><span class="n">MyHeader</span><span class="o">*</span><span class="p">)[</span><span class="n">array</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 需要修改 AutoresizingMask, 不然可能因為大小的關係跑掉.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">autoresizingMask</span> <span class="o">=</span> <span class="n">UIViewAutoresizingNone</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// your statement</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在這邊, 先介紹第一種方法使用<code>UINib</code>來載入Xib的內容, 載入完成後在將Xib的資料實體化, 這邊會回傳一個<code>NSArray</code>包含著Xib所有的內容(top-level objects).</p>

<p><p class='info warning' data-title='注意'>UINib只能使用Class Method來建立實體</p></p>

<p>在Line4跟5的地方, <code>[nib instantiateWithOwner:nil options:nil]</code> 帶入的Owner跟Options都是<code>nil</code>, 因為我們再Xib中並沒有對<code>File's Owner</code>做Class的設定, 所以並不需要帶入(下一個內容會帶入) 不過即使這邊帶入也沒關係並沒有特別影響, 至於<code>options</code>的部份因為我自己沒有用到, 不過有查到一個相關的內容, 在最後附上給大家參考.</p>

<p><p class='info info' data-title='關於回傳的Array'>另外, 關於回傳的Array, 因為xib裡面只有一個view, 所以才能用<code>lastObject</code>這個method去取得, 如果Xib裡面有多個獨立的view(可以參考第二個內容的圖), 就需要先判斷載入的view的class, 在去做設定.</p></p>

<p>最後把MyHeader加到RootViewController的View中, 呈現的畫面參考下圖</p>

<p><img src="http://cl.ly/image/2q1T3C171g3W/iOS%20%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%E2%80%9C2013.8.30%20%E4%B8%8A%E5%8D%8811.36.17%E2%80%9D.png" width="320" height="480"></p>

<p>上面有提到說, 載入Xib的方式有兩種, 一種是使用<code>UINib</code>, 另一個方式是使用<code>NSBundle</code>, NSBundle有為載入Xib提供一個Category, 那麼我們修改一下init的內容在嘗試一次.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>use NSBundle loading Xib </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">NSArray</span><span class="o">*</span> <span class="n">array</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//    UINib *nib = [UINib nibWithNibName:@&quot;MyHeader&quot; bundle:nil];</span>
</span><span class='line'><span class="c1">//    array = [nib instantiateWithOwner:nil</span>
</span><span class='line'><span class="c1">//                              options:nil];&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">array</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">loadNibNamed:</span><span class="s">@&quot;MyHeader&quot;</span>
</span><span class='line'>                                      <span class="nl">owner:</span><span class="nb">nil</span>
</span><span class='line'>                                    <span class="nl">options:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">self</span> <span class="o">=</span> <span class="p">(</span><span class="n">MyHeader</span><span class="o">*</span><span class="p">)[</span><span class="n">array</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 需要修改 AutoresizingMask, 不然可能因為大小的關係跑掉.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">autoresizingMask</span> <span class="o">=</span> <span class="n">UIViewAutoresizingNone</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>修改過後, 呈現的內容將跟使用<code>UINib</code>一模一樣.</p>

<h3>Q&amp;A</h3>

<p>Q: 如果再一個ViewController.xib中放入一個<code>MyHeader</code>View, 這個MyHeader有辦法載入嗎?<br/>
A: 我現在嘗試還沒成功, 如果有成功的話在額外補充囉.</p>

<h1>在ViewController中, 不同的View使用不同的Xib載入內容.</h1>

<p>這邊先稍微解釋一下這個內容跟第一個內容最後的Q&amp;A的差異, 這邊的View不會是一個<code>UIView的Subclass</code>, 只是讓這個View的載入從另一個Xib去帶入, 跟一般ViewController.xib可能包含不一只一個View(參考下圖), 其中我所選取的是ViewController's view(灰底), 旁邊有另一個view, 現在這個內容就是把白色的View抽出來到另一個Xib裡面.</p>

<p><img src="http://cl.ly/image/3i1g3y3s1z0A/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202013-08-30%20%E4%B8%8B%E5%8D%8812.21.44.png"></p>

<p>接下來我們要建立一個ViewController, 這個ViewController有一個UITableView跟UIView, 其中UIView是要用另個一Xib(不是ViewController所使用的Xib)來載入這個View.</p>

<p>這邊的一些動作跟上面有些類似會省略一些內容, 大致要做的事情有下列</p>

<ul>
<li>建立UIViewController, 讓ViewController有<code>tableView</code>跟<code>tableViewHeader</code></li>
<li>為tableViewHeader建立Xib, 並完成連結</li>
</ul>


<h3>Step. 2-1</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>建立MyViewController </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">@</span><span class="n">interface</span> <span class="n">MyViewController</span> <span class="o">:</span> <span class="n">UIViewController</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">UITableViewDataSource</span><span class="p">,</span> <span class="n">UITableViewDelegate</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UITableView</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">tableView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UIView</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">header</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>接著打開MyViewController.xib, 並在View加入一個TableView, 並且與Class建立連結, 參考下圖</p>

<p><img src="http://cl.ly/image/1o1R0U1z3R0t/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202013-08-30%20%E4%B8%8B%E5%8D%883.55.36.png"></p>

<h3>Step. 2-2</h3>

<p>接下來我們直接建立ViewController's header要使用的xib並命名為<code>MyVCHeader</code>, 這邊比較不同的地方是, 這次的File's Owner地方, 需要到<code>Identity Inspector</code>將Custom Class更改為<code>MyViewController</code>, 這樣一來我們才有辦法在MyVCHeader.xib存取到MyViewController的<code>IBOutlet</code>參數; 完成後, 在xib建立一個view, 並在view加入幾個subview. 最後再把view跟File's Owner的<code>header</code>做連結.(參考下圖)</p>

<p><img src="http://cl.ly/image/3R0l3s1R2j1t/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202013-08-30%20%E4%B8%8B%E5%8D%884.21.45.png"></p>

<p>接下來在<code>MyViewController.m</code>的<code>viewDidLoad</code>中, 我們來實作使header從Xib載入, 並將header設定為tableView's tableHeaderView.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'><span class="c1">// Do any additional setup after loading the view from its nib.</span>
</span><span class='line'>
</span><span class='line'><span class="n">UINib</span><span class="o">*</span> <span class="n">nib</span> <span class="o">=</span> <span class="p">[</span><span class="n">UINib</span> <span class="nl">nibWithNibName:</span><span class="s">@&quot;MyVCHeader&quot;</span>
</span><span class='line'>                            <span class="nl">bundle:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">nib</span> <span class="nl">instantiateWithOwner:</span><span class="n">self</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">tableHeaderView</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">header</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="http://cl.ly/image/0u1E1h1a1s2y/iOS%20%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%E2%80%9C2013.8.30%20%E4%B8%8B%E5%8D%884.42.17%E2%80%9D.png"></p>

<p>在執行之後的內容就是上圖; 在這邊你可能注意到, 這次並沒有運用回傳的Array來進行assign的動作, 而是在建立實體的時候, 將<code>owner</code>傳給帶入method中, 就會自己去做完成最後的connect動作, 這部份其實跟UIViewController在loadView之後的在去載入Xib(最後會到<code>viewDidLoad</code>)是一樣的動作.</p>

<p>ps. 這邊也可以使用NSBundle來載入內容</p>

<h1>使用Xib來定義UITableViewCell, 並直接讓UITableView使用.</h1>

<p>這個內容會延續第二個內容製作的項目, 同時運用xib來建立Cell; 接下來會有兩個動作要去完成</p>

<ul>
<li>建立一個UITableViewCell Subclass然後跟Xib做連結(命名為MyCell)</li>
<li>用UITableView註冊步驟一建立的UITableViewCell Subclass</li>
</ul>


<h3>Step. 3-1</h3>

<p>這個動作跟第一個內容很像, 不過在.m中不需要特別使用UINib(NSBundle)來實作載入xib的動作; 在這邊就不多做說明, 可以參考下面在去實作xib就可以.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MyCell.h </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">@</span><span class="n">interface</span> <span class="n">MyCell</span> <span class="o">:</span> <span class="n">UITableViewCell</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">titleLabel</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">indexLabel</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="http://cl.ly/image/2P0Z2S142x2y/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202013-08-30%20%E4%B8%8B%E5%8D%887.49.26.png"></p>

<h3>Step. 3-2</h3>

<p>接下來在<code>viewDidLoad</code>讓TableView註冊MyCell, 這邊註冊的時候會需要帶入一個<code>identifier</code>, 這個identifier在之後是取得Cell的內容.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>對TableView註冊MyCell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">UINib</span><span class="o">*</span> <span class="n">myCellNib</span> <span class="o">=</span> <span class="p">[</span><span class="n">UINib</span> <span class="nl">nibWithNibName:</span><span class="s">@&quot;MyCell&quot;</span> <span class="nl">bundle:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="nl">registerNib:</span><span class="n">myCellNib</span> <span class="nl">forCellReuseIdentifier:</span><span class="n">myCellIdentifier</span><span class="p">];</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>接著再實作UITableViewDataSource取得Cell的mehtod</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">UITableViewCell</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">cellForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">MyCell</span><span class="o">*</span> <span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier:</span><span class="n">myCellIdentifier</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">cell</span><span class="p">.</span><span class="n">titleLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;t-%d&quot;</span><span class="p">,</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'><span class="n">cell</span><span class="p">.</span><span class="n">indexLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>上面的程式碼你會注意到, 你不需要在去檢查cell是不是存在的動作, tableview會自己去做reuse跟create新的instance的動作, 這樣就可以直接使用MyCell. 執行的結果參考下圖.</p>

<p><img src="http://cl.ly/image/2s1s1430132p/iOS%20%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%E2%80%9C2013.8.30%20%E4%B8%8B%E5%8D%889.40.16%E2%80%9D.png"></p>

<h2>最後</h2>

<p>關於用code藍Layout比較快還是用Xib會比較快速, 個人覺得可以是情況而定, 比較複雜的ViewController如果有較多的View需要去做切換, 可以使用xib+code的混合方式, 減少過多的程式碼, 也避免一個xib有太多的view而不好管理, 不過檔案可能會比較多, 就依照個人取捨來選擇作法吧.
如果有任何錯誤, 在麻煩大家幫忙解答一下, 謝謝.</p>

<h4>References &amp; Others</h4>

<p>最後一個Link有提到關於載入Xib要帶入<code>options</code>的部份, 如果有興趣可以特別閱讀一下</p>

<p><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/LoadingResources/Introduction/Introduction.html#//apple_ref/doc/uid/10000051i">Resource Programming Guide</a><br/>
<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/NSBundle_UIKitAdditions/Introduction/Introduction.html#//apple_ref/occ/instm/NSBundle/loadNibNamed:owner:options:">NSBundle UIKit Additions Reference</a><br/>
<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UINib_Ref/Reference/Reference.html#//apple_ref/doc/uid/TP40009580-CH1-24706">UINib Class Reference</a>
<a href="http://stackoverflow.com/questions/4071738/how-to-use-a-xib-and-a-uiview-subclass-together">How to use a xib and a UIView subclass together?</a><br/>
<a href="http://stackoverflow.com/questions/6950674/how-to-use-a-common-target-object-to-handle-actions-outlets-of-multiple-views">How to use a common target object to handle actions/outlets of multiple views?</a></p>
]]></content>
  </entry>
  
</feed>
