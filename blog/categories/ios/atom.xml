<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Green]]></title>
  <link href="http://greenchiu.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://greenchiu.github.io/"/>
  <updated>2014-09-01T22:52:22+08:00</updated>
  <id>http://greenchiu.github.io/</id>
  <author>
    <name><![CDATA[Green Chiu]]></name>
    <email><![CDATA[handkid1986@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Memo] 關於 UIView convertRect]]></title>
    <link href="http://greenchiu.github.io/blog/2014/09/01/memo-the-uiview-convertrect/"/>
    <updated>2014-09-01T22:26:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2014/09/01/memo-the-uiview-convertrect</id>
    <content type="html"><![CDATA[<p>來記錄一下前幾天 Allen 問了我 UIView 兩個 method</p>

<ul>
<li> convertRect:fromView:</li>
<li> convertRect:toView:</li>
</ul>


<p>有什麼差異, 該如何使用的問題.</p>

<!--more-->


<p>舉個例子:</p>

<p>當碰到需要將一個 B view 中的是一個 C View 位置(C view ‘s frame), 要被轉移到另一個 A view 上的時候, 要讓<code>視覺上的位置保持不變</code>.</p>

<p>配合下面的圖片來服用~</p>

<p><img src="http://cl.ly/image/1A292h1R0M2d/view_sample01.png"></p>

<p>途中有三個 View 分別為 A, B, C<br/>
B 是 A 的 subview,<br/>
C 是 B 的 subview,</p>

<p>這時我們要將 C 轉移到 A,<br/>
參考下圖 (我先把 B 隱藏起來)<br/>
這時就可以使用 convertRect:toView: 來取得新的 frame 給 C.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>convertRect:toView: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">newFrame</span> <span class="o">=</span> <span class="p">[</span><span class="n">viewB</span> <span class="nl">convertRect:</span><span class="n">viewC</span><span class="p">.</span><span class="n">frame</span> <span class="nl">toView:</span><span class="n">viewA</span><span class="p">];</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="http://cl.ly/image/401m3j421N2T/view_sample2.png"></p>

<p>在將 C 直接轉移到 A 後( C 是 A 的 subview ), 我們想把 B 加入到 C 裡面, 視覺位置依然保持不變</p>

<p>這時 B 的 frame 是對應 A 的, 想要取得 B 在 C 應該有的位置, 就使用 convertRect:fromView:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>convertRect:fromView: </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">newFrame</span> <span class="o">=</span> <span class="p">[</span><span class="n">viewC</span> <span class="nl">convertRect:</span><span class="n">viewB</span><span class="p">.</span><span class="n">frame</span> <span class="nl">fromView:</span><span class="n">viewA</span><span class="p">];</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>最後的結果會跟下面一樣</p>

<p><img src="http://cl.ly/image/2L390s0R0h3r/view_sample3.png"></p>

<p>這個兩個 method 使用到的時機主要就是保持視覺位置不變, 通常是做<code>動態</code>被使用到的機會會最大~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[WWDC2014] About the  XCode 6]]></title>
    <link href="http://greenchiu.github.io/blog/2014/06/15/wwdc2014-about-the-xcode-6/"/>
    <updated>2014-06-15T16:44:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2014/06/15/wwdc2014-about-the-xcode-6</id>
    <content type="html"><![CDATA[<p>What's New in XCode 6.
session 401</p>

<!--more-->


<p>一開始提了一拖拉庫的內容, 不過都只是快速帶過</p>

<h2>Playground</h2>

<p>Swift的互動模式, 可以在這邊直接驗證 swift 的程式是否符合預期, 適合拿來做驗證與嘗試, 在Live Rendering 只支援 framework + Iterface Builder 的情況下, playground 即時編譯的特性可以彌補 Live Rendering的缺點.</p>

<h2>Swift in Project</h2>

<p>在專案內使用 Swift, 如果是同一個專案下的話, ObjectC class 可以不用做任何的 import 動作就可以直接使用; 如果是其他的 framework 下的 class, 可以直接使用 <code>@import [frameworkName]</code> 或是 <code>#import "framework-Swift.h"</code>, 就可以載入 framework(module)內的 swift class.</p>

<h2>Test</h2>

<p>在 iOS8 中, 對於 TestCase 開始支援直接執行單一的 testMethod, 不需要在build test target.
搭配 <code>measureBlock</code> 可以測試該 test 所耗費的時間, 還可以設定時間來判斷這個 case 是否因為超出預期而被判定失敗來拜調整該程式的 proformance; 同時也可以直接使用 profile 來作更進一步的動作.</p>

<h2>Interface Builder</h2>

<p>Swift Live Rendering, 從使用 framework 的 swift class, 可以搭配 <code>@IBDesignable</code> 直接進行畫面的設計與調整; <code>@IBInspectable</code>更是改進了自定義View無法在 IB 中調整對應屬性, 以前在iOS沒有辦法做這件事情, 在 mac 上也還要多做處理使用起來也沒有這麼直觀. 比較可惜的是只有在 framework 的狀態下才能這樣使用.</p>

<p>Debug Selected Views 也可以快速的來對 View 做一些 debug 的動作, 就不用再等待慢慢的編譯完成後再 device/simulator 再進行.</p>

<p>Size-class, 就是簡單的操作, 可以客製不同 layout 的 autolayout.</p>

<h2>Debug View Hierarchy</h2>

<p>這個功能跟 <a href="http://revealapp.com/">Reveal</a> 很像, 不過用起來沒有Reveal那麼完善, 可以拿來做一些簡單的檢查, 再互動沒有反應或者是有些 view 莫名的不見得話, 用這個功能也許可以找到原因.</p>

<h3>小記</h3>

<p>不得不說新的xcode6 進步很多, 再 debug 方面也是大加分, 很期待正式版 release, 不過在beta crash的次數還是很讓人崩潰 Q_Q.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[WWDC2014] About The Adaptive App.]]></title>
    <link href="http://greenchiu.github.io/blog/2014/06/14/wwdc2014-about-the-adaptive-app/"/>
    <updated>2014-06-14T21:06:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2014/06/14/wwdc2014-about-the-adaptive-app</id>
    <content type="html"><![CDATA[<p>[Memo] Building Adaptive Apps with UIKit, Session 216</p>

<!--more-->


<h3>Size class</h3>

<p>在 iOS8 之前, 在開發過程中會有3個畫面的大小要去考慮, 並且還需要對 Protrait 跟 Landscape 做鄉對應的設計與調整.</p>

<p>而現在提出了一個新的概念 <code>Size class</code> 來描述現在 device 的 size(?) 與 oriention.</p>

<h4>What's the size class?</h4>

<p>size class 顧名思義的就是用 width x height 的概念, 來描述現在的畫面呈現的大小; 並且使用下面的描述來敘述現在的畫面大小.</p>

<ul>
<li>Compact (目前只有 iPhone 有使用到)</li>
<li>Regular</li>
</ul>


<p><img src="http://cl.ly/image/230z253x0e0o/Size%20Classes.jpg" width="600"></p>

<p>Apple 用兩個值來解釋現在顯示的 size; 已 iPhone 來說, 我們可以用 Compact x Regular 跟 Compact x Compact 來表示現在的 orientation 分別是 Protrait 以及 Landscope.</p>

<p>到這邊也許會有一點搞混, 也許會出現這樣的疑問 : <br/>
Q:在iPhone的時候, compact 的大小等於320嗎? <br/>
A:其實是不一定的, 這個數字是可以改變的.</p>

<p><code>Compact</code> &amp; <code>Regular</code> 與其說是一個數值, 其實應該要把它理解成一個狀態的敘述, 可以依照實際的需求去調整<code>UIView / UIViewController</code>的<code>size class</code>; 即便在原本的iPhone Protrait(320x568) 的畫面下, 你也可以把寬度定義成是 Regular, 讓他顯示分割畫面.</p>

<p><img src="http://cl.ly/image/3b1O391j0I3x/iOS%20Simulator%20Screen%20Shot%202014.6.14%20%E4%B8%8B%E5%8D%8811.31.03.png" width="320"></p>

<h4>UITraitCollection</h4>

<p>Apple 使用 <code>UITraitCollection</code> 是用來表示現在 View 的 size class; 在 iOS8 中, UIView &amp; UIViewController 都實作了一個新的 protocol <code>UITraitEnvironment</code>, 來描述這個底下的 view or subviews 的 traitCollection.</p>

<h4>Asset Catalogs</h4>

<p>Asset Catalogs 同使也增加了對應的功能, 讓畫面在不同的 sizs class 使用不同大小的圖片.</p>

<p>在 asset catalogs 的 inspector 中, 多出了 width &amp; height 的選項, 可以依照實際的需求增加圖檔</p>

<p><img src="http://cl.ly/image/0Z1t0m0e123M/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-06-14%20%E4%B8%8B%E5%8D%8811.46.08.png"></p>

<p>關於 showViewController 的部份, 跑進去 UIViewController.h 看了一下, 比較像是最後找到了一樣有實作 showViewController:sender: 這個 method 的 UISplitViewController 物件, 讓splitViewController 去處理相關的事情.</p>

<h2>小記</h2>

<p>Adaptive 這個概念是想要讓的 device 可以輕易的改變/判斷 UITraitCollection 的內容進而 Customize layout, 在圖片的支援上也是挺到位; 在 IB 上更是支援各個 size 可以先共用基本的 autolayout 最後在個別 customize, 搭配 preivew 功能更可以馬上知道是否符合需求.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UICollectionViewLayout好神奇]]></title>
    <link href="http://greenchiu.github.io/blog/2014/02/15/uicollectionviewlayouthao-shen-qi/"/>
    <updated>2014-02-15T22:17:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2014/02/15/uicollectionviewlayouthao-shen-qi</id>
    <content type="html"><![CDATA[<p>分享一下自己對於 UICollectionView 的看法, 僅供參考囉 ~</p>

<p>UICollectionView 是 iOS6 開始支援的功能, 不過只到前陣子我才真正的有接觸到; 我曾經以為 UICollectionView 是 UITableView 的進階版本, 嗯 ... 只能說我好傻好天真. UICollectionView 最厲害的地方應該是對 UICollectionViewCell 等等的 subviews 的 layout.</p>

<!-- more -->


<p>文件中, 其實也詳細的解釋了 UICollectionView 從 dataSource 取得資料後, 會交由 UICollectionViewLayout 來處理 layout 的動作, 如果沒有特別的設定, 大該只會用到 cell 大小不同, 多個 section 這樣的樣式(ex:iPad AppStore), 我也認為 UICollectionView 大該就這樣而已, 直到我真的去查了文件.</p>

<p>這邊可能就不多談怎麼客製化 UICollectionViewLayout, 說說這樣的設計模式好了; AutoLayout 想必大家都不陌生, 很多人也因為 AutoLayout 認為 Apple 要推出不同尺寸的 Device, 但是比起 AutoLayout, 我覺得 UICollectionView 將 layout 的邏輯分離出來, 更適合再不同尺寸的 Device 上來使用.</p>

<p>我個人認為有兩個方面值得這樣去嘗試:</p>

<ul>
<li>易維護</li>
<li>客製化</li>
</ul>


<h4>易維護</h4>

<p>再開發專案的時候, Model 固定之後的通常都不會變動(一變動通常都是改很大就是), 大多數調整的都是排版或者是 view 的外觀; 排版通常會因為不同的長寬再變動或是一些比較特殊的需求, 這時候如果我們將排版跟 view分開來, 我們只要在對應的 class 去修改需要修改的內容, 讓 class 也更精簡.</p>

<h4>客製化</h4>

<p>在不同的大尺寸的 Device, 設計該尺寸下的排版邏輯, 可以減少因為特殊需求需要把功能相同的 class 複製或是建立一個 superclass 來繼承, 在分別寫各自的內容. 可以在各自的 layout class 內去設計對應的樣式, 減少不必的重複內容. 當有新的尺寸時, 擴充也較方便.</p>

<p>至於 Autolayout 的部份, 當然還是看個人需求去使用, 目前我的工作上是沒有碰到相關的應用, 所以也無法在這邊提供太多這方面的建議.</p>

<p>如果有什麼看法歡迎一起討論, 有錯誤也請提出來, 謝謝.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Core-Animation筆記]]></title>
    <link href="http://greenchiu.github.io/blog/2013/11/10/core-animationbi-ji/"/>
    <updated>2013-11-10T09:21:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2013/11/10/core-animationbi-ji</id>
    <content type="html"><![CDATA[<p>這次要來記錄一下<code>CoreAnimation</code>, core animation很實用也很簡單; 一般來說, UIView所提供的Animation已經可以提供大部分我們需要的效果, 不過如果想要用到更複雜, 比較特別的動畫, UIView Animation就沒辦法符合我們的需求.</p>

<!--more-->


<h2>CAAnimation</h2>

<p>CAAnimation 是 CoreAnimation 基礎的 Object, 而我們大多真正會使用的大該是下面五種繼承CAAnimttion的物件</p>

<ul>
<li>CAPropertyAnimation 主要使用 下面兩個subclass

<ul>
<li> CAKeyframeAnimation</li>
<li> CABasicAnimation</li>
</ul>
</li>
<li>CAAnimationGroup</li>
<li>CATransition</li>
<li>CATransaction</li>
</ul>


<p>其中CATransaction使用的方式跟其他四個比較不一樣, 不過也算是比較常用的 CoreAnimation物件; CATransition已經內建了幾種動畫的樣式, 例如相機開啟、水波以及垃圾桶的特效等等, 都可以直接運用CATransition來使用.</p>

<p>CAPropertyAnimation 的使用方式都是改變物件的property, 是使用keypath的方式來改變property(KVC), 在建立Animation的時候就要先給要變化的keypath</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>example </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CABasicAnimation</span> <span class="o">*</span><span class="n">anim</span> <span class="o">=</span> <span class="p">[</span><span class="n">CABasicAnimation</span> <span class="nl">animationWithKeyPath:</span><span class="s">@&quot;alpha&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">anim</span><span class="p">.</span><span class="n">fromValue</span> <span class="o">=</span> <span class="err">@</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">anim</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="err">@</span><span class="mi">1</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">[</span><span class="n">tagetLayer</span> <span class="nl">addAnimation:</span><span class="n">anima</span> <span class="nl">forKey:</span><span class="s">@&quot;anima&quot;</span><span class="p">]</span> <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在使用KVC在使用的時候, 改變內容都是以NSValue; 到帶入的NSValue型態可以參考這邊的<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreAnimation_guide/AnimatableProperties/AnimatableProperties.html#//apple_ref/doc/uid/TP40004514-CH11-SW1">文件</a></p>

<p>上面這樣就會有簡單動畫, layer的半透明會越來越明顯只到消失; 可以指定的變化的數值之外, 同時也可以指定Animation的時間以及動畫的速率方式, 分別是:</p>

<ul>
<li>duration</li>
<li>timimgFunction</li>
</ul>


<p>最後還有一個需要特別提到的部份, <code>fillMode</code>的部份, 可以特別注意一下, 必須要設成 <code>kCAFillModeForwards</code>, 不然在執行玩動畫後, 可能會回到原本的狀態.
而在Keyframe的部份, 也是相識的作法, 用 <code>values</code> 跟 <code>keyTimes</code>.</p>

<h2>CAAnimtaionGroup</h2>

<p>在使用Keyframe and basic animation的時候, 如果是一個一個加到 layer上面去, 會是依序加上去的順序去執行, 如果想要Animation是同時發生(concurrent)的話, 就需要搭配 CAAnimationGroup來使用.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CABasicAnimation</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">anim0</span> <span class="o">=</span> <span class="p">[</span><span class="n">CABasicAnimation</span> <span class="nl">animationWithKeyPath:</span><span class="s">@&quot;...&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">CAKeyframeAnimation</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">anim1</span> <span class="o">=</span> <span class="p">[</span><span class="n">CABasicAnimation</span> <span class="nl">animationWithKeyPath:</span><span class="s">@&quot;...&quot;</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">CAAnimationGroup</span> <span class="o">*</span><span class="n">animGroup</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAAnimationGroup</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">animGroup</span><span class="p">.</span><span class="n">animations</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="n">anim0</span><span class="p">,</span> <span class="n">anim1</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">[</span><span class="n">targetLayer</span> <span class="nl">addAnimation:</span><span class="n">animGroup</span> <span class="nl">forKey:</span><span class="s">@&quot;anima&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>CATransaction</h2>

<p>最後來提提CATransaction; 在運用CALayer的時候, 只要我們一修改frame, Layer就會開始呈現動畫,
而CATransaction是可以用來控制這些動畫的時間跟動畫速率, 跟UIView的Aniamtion用法有點像.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">CATransaction</span> <span class="n">begin</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">animated</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">CATransaction</span> <span class="nl">setValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">kCFBooleanTrue</span>
</span><span class='line'>                 <span class="nl">forKey:</span><span class="n">kCATransactionDisableActions</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">CATransaction</span> <span class="nl">setAnimationDuration:</span><span class="mf">.3f</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">self</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">clearColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">;</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">gradientLayer</span><span class="p">.</span><span class="n">colors</span> <span class="o">=</span> <span class="n">colors</span><span class="p">;</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">gradientLayer</span><span class="p">.</span><span class="n">locations</span> <span class="o">=</span> <span class="n">locations</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">CATransaction</span> <span class="n">commit</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>如果有有錯誤也請幫忙指正, 謝謝.</p>
]]></content>
  </entry>
  
</feed>
