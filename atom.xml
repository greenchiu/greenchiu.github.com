<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Green]]></title>
  <link href="http://greenchiu.github.io/atom.xml" rel="self"/>
  <link href="http://greenchiu.github.io/"/>
  <updated>2013-08-17T15:04:09+08:00</updated>
  <id>http://greenchiu.github.io/</id>
  <author>
    <name><![CDATA[Green Chiu]]></name>
    <email><![CDATA[handkid1986@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[認識NSOperation]]></title>
    <link href="http://greenchiu.github.io/blog/2013/08/06/ren-shi-nsoperation/"/>
    <updated>2013-08-06T21:13:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2013/08/06/ren-shi-nsoperation</id>
    <content type="html"><![CDATA[<blockquote><p>最近在研究NSOperation+NSOperationQueue vs GCD的部份; 本篇是關於NSOperation + NSOperationQueue的一些介紹</p></blockquote>


<p>關於NSOperation, 基本上是用來操作/執行一個單一的任務, 如果你的任務不複雜, 其實可以使用<code>NSInvocationOperation</code>或是<code>NSBlockOperation</code>直接使用;關於NSOperation又可以分成並發(concurrent, 並連)或非並發(non-concurrent, 串連), 這篇會稍微介紹一下在不使用<code>NSOperationQueue</code>如何成為一個<code>concurrent</code>(<code>asynchrouons</code>)的operation.</p>

<!-- more -->


<h2>這篇會提到的內容</h2>

<ul>
<li>如何建立Subclass of Operation</li>
<li>建立concurrent Operation</li>
<li>Operation在Queue的用法</li>
</ul>


<p>可能還會提到一點點的<code>NSThread</code>&amp;<code>NSRunLoop</code></p>

<h2>如何建立Subclass of NSOperation</h2>

<p>因為NSOpertaion是一個抽象的Class, 所以在繼承的時候, 會需要去實作一些內容; 要實作的內容又因為Operation是concurrent或是non-concurrent有所不同.</p>

<h3>non-concurrent</h3>

<p>建立non-concurrent的operation比較簡單, 只要在建立的class去實作下面的method的就可以了</p>

<figure class='code'><figcaption><span>non-concurrent operation need implement method </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">main</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在這個method中完成你要做的事情, 就是一個non-concurrent operation了.</p>

<h3>concurrent</h3>

<p>在實作一個concurrent operation相對來說複雜了一點, 你最少需要實作(override)下列幾個methods.</p>

<figure class='code'><figcaption><span>concurrent operation need implement methods </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">start</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isConcurrent</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isExecuting</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isFinished</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中下面兩mehtod改變數值時個需要實作KVO notifications.</p>

<ul>
<li>isExecuting</li>
<li>isFinished</li>
</ul>


<p>在<code>start</code>中, 你必須要去實現異步(asynchronous)的方式, 你會需要產生一個thread讓operation的任務執行在這個thread中; 這邊同時還要注意的是, 不可以在這邊使用<code>[super start]</code>; 以及在執行之前是否這個Operation是否已經被Cancel(isFinished)的狀況.</p>

<h2>建立concurrent Operation</h2>

<p>在上面我們已經了解了建立一個 Subclass of Operation需要實作哪些內容; 接下來直接進入如何建立自己的, 那麼我們開始建立一個新的Class <code>MyOperation</code> 並繼承 <code>NSOperation</code>, 並且有一個建立instance的Mehtod, 可以傳入一個block action. 下面我們先大致定義一些內容, 方便之後的實作.</p>

<figure class='code'><figcaption><span>Create MyOpertation Class </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// MyOperation.h</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">MyOperationAction</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MyOperation</span> : <span class="nc">NSOperation</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithAction:</span><span class="p">(</span><span class="n">MyOperationAction</span><span class="p">)</span><span class="nv">action</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="c1">// MyOperation.m</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="nf">NS_ENUM</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">,</span> <span class="n">MyOperationState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MyOperationReadyState</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">MyOperationExecutingState</span><span class="p">,</span>
</span><span class='line'>    <span class="n">MyOperationFinishedState</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MyOperation</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MyOperationAction</span> <span class="n">_action</span><span class="p">;</span>
</span><span class='line'>    <span class="n">MyOperationState</span> <span class="n">_state</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">MyOperationAction</span> <span class="n">action</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">MyOperationState</span> <span class="n">state</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在.m中, 建立了一個列舉來代表Operation的執行狀態, 接下來我們覆寫幾個應該要實作的method</p>

<figure class='code'><figcaption><span>Override Methods </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark - Override</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isConcurrent</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isExecuting</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">MyOperationExecutingState</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isFinished</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">MyOperationFinishedState</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">start</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 在這邊坐些什麼吧</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面有提到, 如果要讓Operation實現Concurrent我們就必須在在<code>start</code>中去建立一個Thread, 並且讓他的任務在這個Thread中執行; 因此我們將建立一個singleton thread來讓MyOperation使用</p>

<figure class='code'><figcaption><span>Create Singleton Thread </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">keepThreadAlive</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[[</span><span class="n">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">YES</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSThread</span><span class="o">*</span><span class="p">)</span><span class="nf">threadForMyOperation</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">NSThread</span><span class="o">*</span> <span class="n">_threadInstance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">_threadInstance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSThread</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span>
</span><span class='line'>                                           <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">keepThreadAlive</span><span class="p">)</span>
</span><span class='line'>                                             <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_threadInstance</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;MyOperation.Thread&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_threadInstance</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_threadInstance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面有兩個method, 其中<code>keepThreadAlive</code>就如同Method的名字一樣, 是為了要讓Thread可以持續的運作, 不會在還沒做完事情, thread就結束了. 裡面的作法就是給他一個無限的loop, 去執行<code>NSRunLoop</code>的<code>run</code>mehtod. 讓這個thread成為NSRunLoop的一個<code>input source</code>.</p>

<p class='info warning' data-title='注意'>這樣子的作法會讓這個thread, 一直存活直到user把app關閉才會結束.</p>


<p>接下來我們回到<code>start</code>來</p>

<figure class='code'><figcaption><span>run the task with MyThread for MyOperation </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">start</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">([</span><span class="n">self</span> <span class="n">isReady</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="n">MyOperationExecutingState</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">performSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">operationDidStart</span><span class="p">)</span>
</span><span class='line'>                     <span class="nl">onThread:</span><span class="p">[[</span><span class="n">self</span> <span class="n">class</span><span class="p">]</span> <span class="n">threadForMyOperation</span><span class="p">]</span>
</span><span class='line'>                   <span class="nl">withObject:</span><span class="nb">nil</span>
</span><span class='line'>                <span class="nl">waitUntilDone:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">operationDidStart</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">isCancelled</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="n">MyOperationFinishedState</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Operation is running %@ thread&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSThread</span> <span class="n">currentThread</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">action</span><span class="p">();</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="n">MyOperationFinishedState</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>到這邊基本上已經完成concurrent operation的實作了, 我們先來測試一下跑起來的情況; 這邊我用一個BlockOperation跟MyOperation一起執行, 我把 MyOperation放在blockOperation前執行~</p>

<figure class='code'><figcaption><span>test MyOperation </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">runOperations</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MyOperation</span><span class="o">*</span> <span class="n">myOperation</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyOperation</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithAction:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;this is MyOperation&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSBlockOperation</span><span class="o">*</span> <span class="n">blockOperation</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBlockOperation</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">blockOperation</span> <span class="nl">addExecutionBlock:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;this is block Operation&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">myOperation</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">blockOperation</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://greenchiu.github.io/images/blog/130806/01.png"></p>

<p>從上圖顯示的Log, 兩個Operation第一個Log的時間是相同的, 所以不算上延遲的話 … 應該已經達到我們想要的asynchronous效果, 那麼接下來在來看看在start中我們有使用到<code>[self isReady]</code>, 另外在operationDidStart中也有去判斷operation是否已經cancel的狀態, 所以我們會需要對<code>isReady</code>以及<code>cancel</code>這兩個method做一些調整</p>

<figure class='code'><figcaption><span>add property for isCancelled and override isReady , cancel  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// MyOperation.m</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MyOperation</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MyOperationAction</span> <span class="n">_action</span><span class="p">;</span>
</span><span class='line'>    <span class="n">MyOperationState</span> <span class="n">_state</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">_cancel</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">MyOperationAction</span> <span class="n">action</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">MyOperationState</span> <span class="n">state</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readonly</span><span class="p">,</span> <span class="n">getter</span> <span class="o">=</span> <span class="n">isCancelled</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">cancel</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// override method</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isReady</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">MyOperationReadyState</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">cancel</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">_cancel</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// 如果你的Operation是執行一些資料處理 or request, 可以做一些其他的處理</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>到這邊我們把需要用到的method都有實作到了, 不過前面我們有提到<code>isExecuting</code>、<code>isFinished</code>是需要實作<code>KVO Nofifications</code>的, 在文件中你可以看到需要generate KVO notifications的property大該有下列幾個</p>

<ul>
<li><strong>isCancelled</strong> - read-only property</li>
<li>isConcurrent - read-only property</li>
<li><strong>isExecuting</strong> - read-only property</li>
<li><strong>isFinished</strong> - read-only property</li>
<li><strong>isReady</strong> - read-only property</li>
<li>dependencies - read-only property</li>
<li>queuePriority - readable and writable property</li>
<li>completionBlock - readable and writable property</li>
</ul>


<p>其中粗體的部份是在MyOperation會變動的, 所以我們必須在變動的時候送出KVO Notification, 因此我們再稍微調整一下, 在有修改到state幾個地方跟cancel都加上動作</p>

<figure class='code'><figcaption><span>add kvo notifications </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">cancel</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;isCancelled&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">_cancelled</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;isCancelled&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">start</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">([</span><span class="n">self</span> <span class="n">isReady</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;isExecuting&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;isReady&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_state</span> <span class="o">=</span> <span class="n">MyOperationExecutingState</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;isReady&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;isExecuting&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">performSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">operationDidStart</span><span class="p">)</span>
</span><span class='line'>                     <span class="nl">onThread:</span><span class="p">[[</span><span class="n">self</span> <span class="n">class</span><span class="p">]</span> <span class="n">threadForMyOperation</span><span class="p">]</span>
</span><span class='line'>                   <span class="nl">withObject:</span><span class="nb">nil</span>
</span><span class='line'>                <span class="nl">waitUntilDone:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">operationDidStart</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">isCancelled</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;isFinished&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;isCancelled&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_state</span> <span class="o">=</span> <span class="n">MyOperationFinishedState</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;isCancelled&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;isFinished&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Operation is running %@ thread&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSThread</span> <span class="n">currentThread</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">action</span><span class="p">();</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;isFinished&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;isExecuting&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_state</span> <span class="o">=</span> <span class="n">MyOperationFinishedState</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;isExecuting&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;isFinished&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣, 就完成了一個簡易的Operation了~ 當然在不同的情況之下還是有一些部分需要做調整, 例如使用OperationQueue的時候, 你為Operation加上<code>dependent operation</code>, 就必須要讓isReady return <code>NO</code>, 否則queue可能就會判斷operation isReady=YES, 就直接去執行, 這樣造成結果或執行上的錯誤.</p>

<h2>Operation在Queue的用法</h2>

<p>在前面有講接一些該如何去實作一個Operation; 當然提到Operation通常都不會忘掉OperationQueue, 使用Queue, 除了可以讓non-concurrent operation達到concurrent的效果外, 也可以讓Operation去等待某些Operation完成後再去執行(替operation加上<code>dependent operation</code>), 而且比起每次都自行去建立<code>Thread</code>並且在用完後自行回收, OperationQueue使用起來更加的方便更有效率.</p>

<p>在使用的時候, 要讓non-concurrent operation在queue中可以以concurrent的方式去執行, 你必須要建立一個NSOperationQueue實體, 如果使用<code>[NSOperationQueue mainQueue]</code>所取得的queue, 除非operation有特別處理過, 不然都會在<code>main thread</code>中執行, 不過依然會等待上一個operation完成後才會去執行; 以下面的範例, 我們來看看輸出的結果會如何:</p>

<figure class='code'><figcaption><span>example for NSOperationQueue </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">runOperationsatCustomQueue</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSBlockOperation</span><span class="o">*</span> <span class="n">blockOperation01</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBlockOperation</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">blockOperation01</span> <span class="nl">addExecutionBlock:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSThread</span> <span class="n">currentThread</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;this is no.1 block Operation&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSBlockOperation</span><span class="o">*</span> <span class="n">blockOperation02</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBlockOperation</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">blockOperation02</span> <span class="nl">addExecutionBlock:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSThread</span> <span class="n">currentThread</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;this is no.2 block Operation, start sleep 1 second&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;no.2 wake up.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSBlockOperation</span><span class="o">*</span> <span class="n">blockOperation03</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBlockOperation</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">blockOperation03</span> <span class="nl">addExecutionBlock:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSThread</span> <span class="n">currentThread</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;this is no.3 block Operation, no.2 operation is completed, start task&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">blockOperation03</span> <span class="nl">addDependency:</span><span class="n">blockOperation02</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSOperationQueue</span><span class="o">*</span> <span class="n">queue</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSOperationQueue</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">queue</span> <span class="nl">setSuspended:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">queue</span> <span class="nl">setMaxConcurrentOperationCount:</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">queue</span> <span class="nl">addOperation:</span><span class="n">blockOperation01</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">queue</span> <span class="nl">addOperation:</span><span class="n">blockOperation02</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">queue</span> <span class="nl">addOperation:</span><span class="n">blockOperation03</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">queue</span> <span class="nl">setSuspended:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://greenchiu.github.io/images/blog/130806/02.png"></p>

<p>從上面的結果, 你可以看到queue幫我們建立了三個thread分別給operation01、02跟03使用(有時候02跟03可能會出現公用一個thread的狀況), 你並不需要去特別管理thread, queue會自己幫你完成; 在上面的程式碼中, 我設定了queue一次最多可以執行五個operation, 然後operation03必須等operation02完成後, 才會接著執行, 因此圖片中顯示的結果是operation01跟02是一起執行, 接著operation03才執行.</p>

<p>那如果這時候把上面使用的MyOperation會發生什麼事勒, 我們來試試看~ 下面改一下程式碼</p>

<figure class='code'><figcaption><span>add MyOperation to the queue </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">MyOperation</span><span class="o">*</span> <span class="n">myOperation01</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyOperation</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithAction:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;this is 01 MyOperation&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="n">MyOperation</span><span class="o">*</span> <span class="n">myOperation02</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyOperation</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithAction:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;this is 02 MyOperation&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSOperationQueue</span><span class="o">*</span> <span class="n">queue</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSOperationQueue</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">queue</span> <span class="nl">setSuspended:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">queue</span> <span class="nl">setMaxConcurrentOperationCount:</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">queue</span> <span class="nl">addOperation:</span><span class="n">myOperation01</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">queue</span> <span class="nl">addOperation:</span><span class="n">myOperation02</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">queue</span> <span class="nl">addOperation:</span><span class="n">blockOperation01</span><span class="p">];</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://greenchiu.github.io/images/blog/130806/03.png"></p>

<p>基本上bopt01、02跟myopt01(myopt02)會是concurrent, 而myopt01跟02之間則是non-concurrent必須要其中一個完成後才會繼續執行(共用同一個thread).</p>

<p>那麼, 有沒有辦法讓Operation(ex:MyOperation)自己執行的時候是concurrent, 然後在queue中執行的時候也是concurrent的方式?</p>

<p>答案我想是有的, 多一個Mehtod<code>asychronous</code>跟變數去判斷是不是asynchronous啟動opertaion, 是的話就給他一個thread去執行任務, 如果直接執行<code>start</code>, 就會是non-concurrent operation; 這樣在使用queue的時候, 因為queue會直接去執行<code>start</code>, 就可以直接幫operation建立一個thread達到concurrent的目的. (isConcurrent = YES or NO, 好像不是主要的判斷方式)</p>

<h2>最後</h2>

<p>打完後發現感覺是打給自己看的XD, 都是程式碼~; 不過也把它留存當記錄囉, 如果有幫助到其他人也很棒. 有看到的人如果發現錯誤也麻煩幫忙指正一下, 感謝.</p>

<p>最後附上參考網址跟一些stackoverflow的內容:</p>

<ul>
<li><a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/NSOperation_class/Reference/Reference.html#//apple_ref/doc/uid/TP40004591">NSOperation Class Reference</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/NSOperationQueue_class/Reference/Reference.html">NSOperationQueue Class Reference</a></li>
<li><a href="https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSThread_Class/Reference/Reference.html">NSThread Class Reference</a></li>
<li><a href="https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW1">Threading Programming Cuide # Run Loops</a></li>
<li><a href="http://stackoverflow.com/questions/1646795/nsoperationqueue-and-concurrent-vs-non-concurrent">NSOperationQueue and concurrent vs non-concurrent</a></li>
<li><a href="http://stackoverflow.com/questions/3041837/nsthread-vs-nsoperationqueue-vs-on-the-iphone">NSThread vs. NSOperationQueue vs. ??? on the iPhone</a></li>
<li><a href="http://stackoverflow.com/questions/6273020/keep-nsthread-alive-and-run-nsrunloop-on-it">Keep NSThread alive and run NSRunLoop on it</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCD筆記]]></title>
    <link href="http://greenchiu.github.io/blog/2013/07/14/gcdbi-ji/"/>
    <updated>2013-07-14T10:48:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2013/07/14/gcdbi-ji</id>
    <content type="html"><![CDATA[<p class='info info' data-title='News'>更新了兩項關於在GCD中所呼叫的method應該是background or main thread的資訊, 以及UIView是否能在Background GCD中運行 [at] 2013/07/28</p>


<p>GCD是在iOS4才推出的一個新功能, 雖然已經出現很長一段時間了, 不過小弟我最近才開始使用到它。最近也跟幾位好友有一些討論, 其中兩個問題我覺得可以跟大家分享一下, 順便也記錄一下。</p>

<h3>Grand Center Dispatch (GCD)</h3>

<p>那個GCD是什麼呢? 又可以用來作些什麼?</p>

<p>首先GCD是由Apple提供的多執行緒(Multiple Thread)解決方案, 主要是 NSOperationQueue、NSThread的替代方案。在使用GCD的時候, 你需要搭配Block來操作。</p>

<p>使用方式就不多做交代了，網路上有很多更加詳細的介紹<del>(我絕對不承認自己也還在摸索的原因)</del></p>

<!-- more -->


<h3>Globle Queue vs Create Queue</h3>

<p>globle跟自行create的queue到底有何差異?</p>

<p>在跟鳥大討論的時候, 這個問題一直困擾著我; 我在專案上有次在使用<code>dispatch_get_global_queue</code>來執行我要的內容, 然後發現跑出來的任務時間並不是按照順序來完成的 … 但是改用<code>dispatch_queue_create</code>就解決了我的問題, 當時因為時程上的關係沒有深究, 後來鳥大提供了<a href="http://stackoverflow.com/questions/10984885/what-is-the-difference-between-dispatch-get-global-queue-and-dispatch-queue-crea">stackoverflow的相關問題</a></p>

<p>這邊有提到說<code>dispatch_get_global_queue</code>取得的queue在執行的時候是<code>concurrent</code>, 也就是並發的去執行(並連), 但是執行內容完成的順序會不一樣, 因此就可能會出現我所遇到的狀況; 而<code>dispatch_queue_create</code>取得的queue是<code>serial</code>的, 同時間只會執行一個任務(串連)。</p>

<h3>release or not</h3>

<p>到底要不要release queue, 基本上在<code>dispatch_get_global_queue</code> and <code>dispatch_get_main_queue()</code>, 因為是取得系統的內容, 所以並不用自己去執行<code>dispatch_release</code>, 不過在發佈最低是低於iOS 6, 你就會需要自己去管理你使用到的queue、group … 等GCD物件。</p>

<h3>關於GCD中的使用的Method</h3>

<p>最近在GCD中呼叫其他的method, 然後很自然而然的, 又把這個method運行的內容包近GCD中; 忽然驚覺到這樣不會過度使用嗎? 就stackoverflow了一下, 找到了一個有用的答案</p>

<blockquote><p>Methods are executed on the thread or queue from which they are invoked. So, if you wanted to update UI after processing data on a background queue, you&#8217;d need to explicitly execute your UI update on the main thread.</p></blockquote>


<p></p>

<h3>UIView能不能在GCD中運行</h3>

<p>其實就是聽說做的到, 但是自己試不出來 …<a href="http://stackoverflow.com/questions/11122957/is-it-ok-to-create-a-uiview-on-a-background-thread">answer</a>,參考一下 …</p>

<p>參考來源:</p>

<ul>
<li><a href="http://stackoverflow.com/questions/10984885/what-is-the-difference-between-dispatch-get-global-queue-and-dispatch-queue-crea">What is the difference between dispatch_get_global_queue and dispatch_queue_create?</a></li>
<li><a href="http://stackoverflow.com/questions/12730202/do-you-need-to-release-gcd-queues-under-arc-in-ios-6-0">Do you need to release GCD queues under ARC in iOS 6.0?</a></li>
<li><a href="http://blog.csdn.net/totogo2010/article/details/8016129">iOS多线程编程之Grand Central Dispatch(GCD)介绍和使用</a></li>
<li><a href="https://developer.apple.com/library/ios/#documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW1">Apple Document</a></li>
</ul>


<p>update [2013/07/28]</p>

<ul>
<li><a href="http://stackoverflow.com/questions/12032108/calling-another-method-from-within-a-gcd-queue">Calling another method from within a GCD queue</a></li>
<li><a href="http://stackoverflow.com/questions/11122957/is-it-ok-to-create-a-uiview-on-a-background-thread">Is it ok to create a UIView on a background thread?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[行事曆小記事]]></title>
    <link href="http://greenchiu.github.io/blog/2013/06/15/xing-shi-li-xiao-ji-shi/"/>
    <updated>2013-06-15T11:38:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2013/06/15/xing-shi-li-xiao-ji-shi</id>
    <content type="html"><![CDATA[<p class='info info' data-title='News'>2013/07/31更新了關於iOS6的部份內容.</p>


<p><img src="http://greenchiu.github.io/images/blog/130615/130615_01.png"></p>

<blockquote><p>行事曆功能是在iOS5就提出的, 在iOS6部分會有一些不同, 不過大致內容都是差不多的; iOS7的部份因為我電腦Xcode5-DP只要打code就會crash, 所以等之後再來做一些補充囉.</p></blockquote>


<p></p>

<p>行事曆功能主要是使用<code>EventKit.framework</code>; 在EventKit中, 除了<code>行事曆(Canlendar)</code>外, 同時也包含<code>提醒事項(Reminders)</code>的功能, 在修改/新增會需要使用到<code>EKEventStore</code>來做操作.</p>

<!--more-->


<p>在這篇文章裡主要會介紹到Calendar的部份, Reminder的操作就要請大家自己嘗試了.</p>

<h3>開始之前</h3>

<p>我們主要會用到幾個Class, 分別是:</p>

<ul>
<li>EKEventStore</li>
<li>EKCalendar</li>
<li>EKEvent</li>
<li>EKAlarm</li>
</ul>


<p>EKEventStore主要是讓我們管理EKCalendar以及EKEvent, <code>EKAlarm</code>是可以在EKEvent中加入提示的鬧鐘.</p>

<h2>EKEventStore</h2>

<p>eventStore在行事曆以及提醒事項的功用是最重要的, 主要是負責建立/刪除/修改行事曆(提醒事項)及事件(EKEvent); 同時也是用來搜尋Event的主要Class.</p>

<figure class='code'><figcaption><span>建立EKEventStore Instance </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">eventStore</span> <span class="o">=</span> <span class="p">[[</span><span class="n">EKEventStore</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你是在iOS6, 你至少需要執行一次取得權限的動作</p>

<figure class='code'><figcaption><span>iOS6, 取得User的許可 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//EKEventStore request permission method</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">requestAccessToEntityType:</span><span class="p">(</span><span class="n">EKEntityType</span><span class="p">)</span><span class="nv">entityType</span> <span class="nf">completion:</span><span class="p">(</span><span class="n">EKEventStoreRequestAccessCompletionHandler</span><span class="p">)</span><span class="nv">completion</span><span class="p">;</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">eventStore</span> <span class="o">=</span> <span class="p">[[</span><span class="n">EKEventStore</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="c1">// after EKEventStore init., get user permission.</span>
</span><span class='line'><span class="n">EKEventStoreRequestAccessCompletionHandler</span> <span class="n">handler</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">granted</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">granted</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 允許使用 …</span>
</span><span class='line'>        <span class="c1">// your statement …</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 不允許 …</span>
</span><span class='line'>      <span class="c1">// other statement … </span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">// 這邊使用EKEntityTypeEvent, 是要存取user iDevice的行事曆; 如果要使用提醒事項就改用EKEntityTypeReminder</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">eventStore</span> <span class="nl">requestAccessToEntityType:</span><span class="n">EKEntityTypeEvent</span> <span class="nl">completion:</span><span class="n">handler</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>除此之外, 你也可以用EKEventStore的Class Mehtod <code>authorizationStatusForEntityType:</code>來判斷是否要取得允許或其他對應的動作</p>

<figure class='code'><figcaption><span>iOS6, 判斷目前的Auth狀態 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">EKAuthorizationStatus</span> <span class="n">authState</span> <span class="o">=</span> <span class="p">[</span><span class="n">EKEventStore</span> <span class="nl">authorizationStatusForEntityType:</span><span class="n">EKEntityTypeEvent</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">authState</span> <span class="o">==</span> <span class="n">EKAuthorizationStatusAuthorized</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;EKAuthorizationStatusAuthorized&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">authState</span> <span class="o">==</span> <span class="n">EKAuthorizationStatusDenied</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;EKAuthorizationStatusDenied&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">authState</span> <span class="o">==</span> <span class="n">EKAuthorizationStatusRestricted</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;EKAuthorizationStatusRestricted&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;EKAuthorizationStatusNotDetermined&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>到這邊, 我們已經完成了EKEventStore的設置, 接著就可以直接建立/修改Event or Calendar</p>

<p class='info warning' data-title='注意'>EKEvent & EKCalendar的實體, 都需要使用EKEventStore來建立實體, 而不是使用method init</p>


<h3>加入Event到Calendar</h3>

<p>接著, 我們建立一個Event到Calendar</p>

<figure class='code'><figcaption><span>建立EKEvent實體, 並加入default Calendar </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">EKEvent</span><span class="o">*</span> <span class="n">myEvent</span> <span class="o">=</span> <span class="p">[</span><span class="n">EKEvent</span> <span class="nl">eventWithEventStore:</span><span class="n">self</span><span class="p">.</span><span class="n">eventStore</span><span class="p">];</span>
</span><span class='line'><span class="n">myEvent</span><span class="p">.</span><span class="n">calendar</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">eventStore</span><span class="p">.</span><span class="n">defaultCalendarForNewEvents</span><span class="p">;</span>
</span><span class='line'><span class="n">myEvent</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;該更新部落格了&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">myEvent</span><span class="p">.</span><span class="n">location</span> <span class="o">=</span> <span class="s">@&quot;Green&#39;s Home.&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">myEvent</span><span class="p">.</span><span class="n">notes</span> <span class="o">=</span> <span class="s">@&quot;這次要寫的內容是關於iOS行事曆的部份, 主要建立一個新的Event還有Calendar&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">myEvent</span><span class="p">.</span><span class="n">startTime</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'><span class="n">myEvent</span><span class="p">.</span><span class="n">endTime</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="nl">dateWithTimeIntervalSince1970:</span> <span class="p">[</span><span class="n">myEvent</span><span class="p">.</span><span class="n">startTime</span> <span class="n">timeIntervalSince1970</span><span class="p">]</span> <span class="o">+</span><span class="mi">3600</span><span class="p">];</span>
</span><span class='line'><span class="n">myEvent</span><span class="p">.</span><span class="n">timeZone</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSTimeZone</span> <span class="nl">timeZoneWithName:</span><span class="s">@&quot;Asia/Taipei&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSError</span><span class="o">*</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">action</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">eventStore</span> <span class="nl">saveEvent:</span><span class="n">myEvent</span>
</span><span class='line'>                                 <span class="nl">commit:</span><span class="n">YES</span>
</span><span class='line'>                                   <span class="nl">span:</span><span class="n">EKSpanThisEvent</span>
</span><span class='line'>                                  <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;save event success:eId:%@&quot;</span><span class="p">,</span> <span class="n">myEvent</span><span class="p">.</span><span class="n">eventIdentifier</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;save event failure, error:%@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面, 我們使用<code>[EKEvent eventWithEventStore:self.eventStore]</code>來建立一個event, 並且將這個event設定了一些基礎內容(title/ location/ notes …etc.), 並且讓這個事件出現在iDevice的預設行事曆中, 儲存成功的話, 就會在行事曆中出現一個event; 如果你希望之後還可以繼續在你的App內維護這個Event, 你需要把<code>eventIdentifier</code>特別記錄下來,搭配下面的方式取得Event, 這樣之後才有辦法去維護這個Event.</p>

<figure class='code'><figcaption><span>取得上次建立的Event </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">EKEvent</span><span class="o">*</span> <span class="n">event</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">eventStore</span> <span class="nl">eventWithIdentifier:</span><span class="n">YOUR_EVENT_IDENTIFIER</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h4>為Event加上Alarm</h4>

<figure class='code'><figcaption><span>建立EKAlarm並加入Event中 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">EKEvent</span><span class="o">*</span> <span class="n">myEvent</span> <span class="o">=</span> <span class="p">[</span><span class="n">EKEvent</span> <span class="nl">eventWithEventStore:</span><span class="n">self</span><span class="p">.</span><span class="n">eventStore</span><span class="p">];</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  ...</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSInteger</span> <span class="n">sendTime</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">]</span> <span class="n">timeIntervalSince1970</span><span class="p">];</span>
</span><span class='line'><span class="c1">//一小時前</span>
</span><span class='line'><span class="n">NSDate</span><span class="o">*</span> <span class="n">alarmDate0</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="nl">dateWithTimeIntervalSince1970:</span><span class="n">sendTime</span> <span class="o">-</span> <span class="p">(</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">1</span><span class="p">)];</span>
</span><span class='line'><span class="n">EKAlarm</span><span class="o">*</span> <span class="n">alarm0</span> <span class="o">=</span> <span class="p">[</span><span class="n">EKAlarm</span> <span class="nl">alarmWithAbsoluteDate:</span><span class="n">alarmDate</span><span class="p">];</span>
</span><span class='line'><span class="c1">//一天前</span>
</span><span class='line'><span class="n">NSDate</span><span class="o">*</span> <span class="n">alarmDate1</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="nl">dateWithTimeIntervalSince1970:</span><span class="n">sendTime</span> <span class="o">-</span> <span class="p">(</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">24</span><span class="p">)];</span>
</span><span class='line'><span class="n">EKAlarm</span><span class="o">*</span> <span class="n">alarm1</span> <span class="o">=</span> <span class="p">[</span><span class="n">EKAlarm</span> <span class="nl">alarmWithAbsoluteDate:</span><span class="n">alarmDate2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">myEvent</span><span class="p">.</span><span class="n">alarms</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="n">alarm0</span><span class="p">,</span> <span class="n">alarm1</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSError</span><span class="o">*</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">action</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">eventStore</span> <span class="nl">saveEvent:</span><span class="n">myEvent</span>
</span><span class='line'><span class="cm">/** </span>
</span><span class='line'><span class="cm"> * ...</span>
</span><span class='line'><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>


<p>到這邊, 就是一個有提示功能的行事曆事件的建立方式, 中間一些參數沒有介紹到(ex:參與者), 大家可以自己去試試看.</p>

<h2>為Application建立一個新的Calendar</h2>

<p>接著, 我想把這個事件加入一個自定義的的Calendar, 接著下來我們先建立一個新的Calendar; 在建立Calendar的部份會使用到一個新的class <code>EKSource</code>, 來自EKEventStore&#8217;s property sources.</p>

<figure class='code'><figcaption><span>建立一個Calendar </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//step1</span>
</span><span class='line'><span class="c1">//這邊取得的方式只有在iOS5才能使用, iOS6會另外說明</span>
</span><span class='line'><span class="n">EKSource</span><span class="o">*</span> <span class="n">theSource</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="n">NSArray</span><span class="o">*</span> <span class="n">tempSources</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">eventStore</span><span class="p">.</span><span class="n">sources</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">EKSource</span> <span class="o">*</span><span class="n">source</span> <span class="k">in</span> <span class="n">tempSources</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">sourceType</span> <span class="o">==</span> <span class="n">EKSourceTypeLocal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">theSource</span> <span class="o">=</span> <span class="n">source</span><span class="p">;</span> 
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>    
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//step2</span>
</span><span class='line'><span class="n">EKCalendar</span> <span class="o">*</span><span class="n">calendar</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">theSource</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">calendar</span> <span class="o">=</span> <span class="p">[</span><span class="n">EKCalendar</span> <span class="nl">calendarWithEventStore:</span><span class="n">self</span><span class="p">.</span><span class="n">eventStore</span><span class="p">];</span>
</span><span class='line'>  <span class="n">calendar</span><span class="p">.</span><span class="n">CGColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">orangeColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">;</span>
</span><span class='line'>  <span class="n">calendar</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;愛合購行事曆&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">calendar</span><span class="p">.</span><span class="n">source</span> <span class="o">=</span> <span class="n">theSource</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span> 
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error: Local source not available&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//step3</span>
</span><span class='line'><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">eventStore</span> <span class="nl">saveCalendar:</span><span class="n">calendar</span> <span class="nl">commit:</span><span class="n">YES</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// save your calendar.calendarIdentifier</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span> 
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error saving calendar: %@.&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Step1</h3>

<p>在Step1的步驟, eventStore.sources, 其實可以把它當成calendar groups(例如iCloud&#8217;s or gmail accounts, gmail在不同的帳號可以建立自己的行事曆), 然後我們取出type=EKSourceTypeLocal來做為我們要使用的source(ps. iOS6比較特別, 後面會有額外的程式修改).</p>

<h3>Step2</h3>

<p>接著我們使用EKCalendar&#8217;s Class Method <code>calendarWithEventStore:</code>來建立calendar instance, 接著設定calendar的顏色、標題還有我們在Step1取得的source.</p>

<h3>Step3</h3>

<p>最後儲存calendar到iDevice的Database中; 如果成功的話, 記得把calendar.calendarIdentifier記錄下來, 下次只要使用下面的方式就可以直接取得這個calendar.</p>

<figure class='code'><figcaption><span>取得上次建立的Calendar </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">EKCalendar</span><span class="o">*</span> <span class="n">eventCalendar</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">eventStore</span> <span class="nl">calendarWithIdentifier:</span><span class="n">YOUR_CALENDAR_IDENTIFIER</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>之後再行事曆的列表中, 你就可以看到你剛剛建立的Calendar(ex:我剛剛建立的是愛合購行事曆)
<img src="http://greenchiu.github.io/images/blog/130615/130615_02.PNG"></p>

<h3>iOS6中的差異</h3>

<p>接著在iOS6中, 該如何取得可以使用的source, 只要將剛剛Step1中的判斷sourceType(line 6)做一些調整, 如下:</p>

<figure class='code'><figcaption><span>@ iOS6, 取得source的調整 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">sourceType</span> <span class="o">==</span> <span class="n">EKSourceTypeCalDAV</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">source</span><span class="p">.</span><span class="n">title</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;iCloud&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果繼續使用EKSourceTypeLocal並不會出現錯誤, 但是就不會出現在列表之中; 另外如果不指定source.title=iCloud的話, 可能會因為沒有權限修改該group(ex:gmail account)而失敗.</p>

<p class='info warning' data-title='2013/07/31 補充'>關於上述的source.title=iCloud的完整原因是, 你並無法建立自己的EKSource, 而在App中你只能存取iCloud的source去做新增Calendar的動作.</p>


<h4>iOS6補充(2013/07/31)</h4>

<p>這幾天有注意到一件事情, 如果你在iCloud的設定中, 行事曆跟提醒事項如果有一個沒有打開, 就無法使用, 在獲得permission完依然無法使用.</p>

<p>再來, 因為只能存取iCloud下的行事曆, 但是iCloud的source.title並不一定會是iCloud, 有可能是其他的內容(ex:appId), 所以當發生這種事情的時候, 可能有兩種作法</p>

<ul>
<li>去提醒使用者或者設定一個欄位讓他去輸入source的title, 以便存取</li>
<li>可以建議使用者到iCloud去, 點擊帳號進到裡面後, 將帳號描述改成iCloud(or another)</li>
</ul>


<p>這樣依照上面的程式, 你就可以存取到iCloud的eksource, 並去新增修改你的Calendar</p>

<h2>題外話</h2>

<p>最近總想著改變一些記錄的方式, 不過有一點不得其門而入, 像是該如何把東西些的足夠深入, 內容方面也是比較精簡; 在一些敘述的方法跟內容的考慮上就變得很難拿捏, 該如何調整可能只能慢慢去做嘗試跟改變了, 也很希望有在看的人可以給我一些建議跟方向, 一起討論程式方面也沒有問題, 謝謝.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用NSInvocation來作為object performSelector的替代方案]]></title>
    <link href="http://greenchiu.github.io/blog/2013/04/27/yong-nsinvocationlai-qu-dai-performselector/"/>
    <updated>2013-04-27T12:47:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2013/04/27/yong-nsinvocationlai-qu-dai-performselector</id>
    <content type="html"><![CDATA[<p>在寫程式的時候, 常常會有需要呼叫好幾個method, 然後在時間上有所需別; 最常遇到的都是希望Layout改變完成之後再去執行下一步動作, 如果是一堆layout animation, 就會很常使用到delay去做一些時間差的區別.</p>

<figure class='code'><figcaption><span>can do it this way  </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">currentMehtod</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">SEL</span> <span class="n">action2</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">action2:</span><span class="p">);</span>
</span><span class='line'>  <span class="p">[</span><span class="n">object</span> <span class="nl">performSelector:</span><span class="n">action2</span> <span class="nl">withObject:</span><span class="n">data</span> <span class="nl">afterDelay:</span><span class="mf">1.f</span><span class="p">];</span>
</span><span class='line'>  <span class="cm">/** …</span>
</span><span class='line'><span class="cm">  * do somethig after …</span>
</span><span class='line'><span class="cm">  **/</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一開始使用的時候覺得還好, 但是慢慢的發現如果我的method一開始寫的時候帶入多個參數, 如果用上面的方式, 就要改寫本來的method, 這樣又得花時間, 而且可能最後都是帶入<code>NSDictionary</code>的物件, 在把需要的資料拉出來, 常常會把map的key打錯又多花很多時間在debug.</p>

<p>在StackOverflow上查了參數數量的問題, 沒想到還真的有一個很棒的解法, 就是 <code>NSInvocation</code>.</p>

<!--more-->


<h2>NSInvocation</h2>

<p>NSInvocation的使用有一個地方要特別注意, invocation不能使用 <code>alloc</code>跟<code>init</code>來建立實體, 只能使用<code>invocationWithMethodSignature:</code>來建立object.</p>

<figure class='code'><figcaption><span>object的method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">actionInvokeArgument1:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">arg1</span> <span class="nf">arg2:</span><span class="p">(</span><span class="n">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="nv">arg2</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;action: arg1 + arg2=%d&quot;</span><span class="p">,</span> <span class="n">arg1</span> <span class="o">+</span> <span class="p">[</span><span class="n">arg2</span> <span class="n">integerValue</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p class='info info' data-title='Argument Type'>使用Invocation, mehtod所帶入的參數也不用都轉成object, int、BOOL…etc.都可以使用</p>


<figure class='code'><figcaption><span>建立一個NSInvocation實體</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">SEL</span> <span class="n">mySelector</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">actionInvokeArgument1:arg2:</span><span class="p">);</span>
</span><span class='line'><span class="n">NSMethodSignature</span><span class="o">*</span> <span class="n">signature1</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">methodSignatureForSelector:</span><span class="n">mySelector</span><span class="p">];</span>
</span><span class='line'><span class="n">NSInvocation</span> <span class="o">*</span><span class="n">invocation</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSInvocation</span> <span class="nl">invocationWithMethodSignature:</span><span class="n">signature1</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>我們先使用<code>NSObject</code>的instance mehtod(也可以使用Class mehtod, 依照個人使用習慣), 先取得一個<code>NSMethodSignature</code>物件, 並建立一個NSInvocation.</p>

<p class='info info' data-title='NSMethodSignature'>NSMethodSignature的numberOfArguments最小值是2; 0跟1是給預設的隱藏參數使用(self & _cmd). 從2開始才是method-spec使用.</p>


<p>這時取得的invocation只有簡單的method可帶入的argument數量, 在正式調用之前你還需要設定<code>target</code>跟<code>selector</code>.</p>

<figure class='code'><figcaption><span>設定invocation並調用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">invocation</span> <span class="nl">setTarget:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">invocation</span> <span class="nl">setSelector:</span><span class="n">mySelector</span><span class="p">];</span>
</span><span class='line'><span class="n">NSInteger</span> <span class="n">arg1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">NSNumber</span><span class="o">*</span> <span class="n">arg2</span> <span class="o">=</span> <span class="err">@</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">invocation</span> <span class="nl">setArgument:</span><span class="o">&amp;</span><span class="n">arg1</span> <span class="nl">atIndex:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">invocation</span> <span class="nl">setArgument:</span><span class="o">&amp;</span><span class="n">arg2</span> <span class="nl">atIndex:</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">invocation</span> <span class="n">invoke</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p class='info warning' data-title='Set Arguments'>使用NSInvocation設定參數時, index要從2開始.</p>


<p><img src="http://greenchiu.github.io/images/blog/130427/01.png"></p>

<figure class='code'><figcaption><span>取得回傳值</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSInteger</span> <span class="n">retVal</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">invocation</span> <span class="nl">getReturnValue:</span><span class="o">&amp;</span><span class="n">retVal</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">retVal</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果要延遲的話可以這樣使用</p>

<figure class='code'><figcaption><span>delay invoke</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">invocation</span> <span class="nl">performSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">invoke</span><span class="p">)</span> <span class="nl">withObject:</span><span class="nb">nil</span> <span class="nl">afterDelay:</span><span class="mi">1</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>要注意的是, 如果會需要取得回傳值, 可能不適合使用delay的方式~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPods提交初體驗]]></title>
    <link href="http://greenchiu.github.io/blog/2013/04/09/cocoapodsti-jiao-chu-ti-yan/"/>
    <updated>2013-04-09T19:44:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2013/04/09/cocoapodsti-jiao-chu-ti-yan</id>
    <content type="html"><![CDATA[<p><img src="http://greenchiu.github.io/images/blog/120409/01.png"></p>

<blockquote><p>距離將GCTagList提交到CocoaPods,大概有一個禮拜了, 也送了兩個版本到上面去; 今天記錄一下提交的一些內容~</p></blockquote>


<p></p>

<!--more-->


<h2>CocoaPods</h2>

<p>CocoaPods是一個管理Objective-C專案的thrid library的工具; 在專案內更新lib不用在使用手動的方式來更新使用的libs, 也可以指定使用lib的版本; 現在已經進步到更新<code>Podfile</code> XCode不用在重新開啟workspace了~</p>

<h2>建立一個Spec for CocoaPods</h2>

<p>依照CocoaPods上的解說, 有幾個步驟:</p>

<ul>
<li>你必須要建立一個的Spec檔案<code>{lib_name}.podspec</code></li>
<li>編輯spec檔案</li>
<li>檢查spec檔案是否正確</li>
<li>spec無誤後, 在 CocoaPods/Specs 加入spec檔案, 送出Pull Request的申請</li>
</ul>


<p>如果沒問題的話, 收到merge的通知就表示你可以在cocoapods上查找你的lib啦, 那麼我們快速的看一下如何製作一個Spec for CocoaPods。</p>

<p>先使用Command line來建立Spec檔案(推薦iTerm2)</p>

<figure class='code'><figcaption><span>建立podspec </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pod spec create GCTagList</span></code></pre></td></tr></table></div></figure>


<p>建立之後, 在資料夾中會出現一個<code>GCTagList.podspec</code> <br/>
<img src="http://greenchiu.github.io/images/blog/120409/02.png"> <br/>
接著編輯spec (依照習慣, 我個人習慣sublime text 2)</p>

<figure class='code'><figcaption><span>編輯Spec </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Pod</span><span class="o">::</span><span class="no">Spec</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">name</span>         <span class="o">=</span> <span class="s2">&quot;GCTagList&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">version</span>      <span class="o">=</span> <span class="s2">&quot;0.1.1&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">summary</span>      <span class="o">=</span> <span class="s2">&quot;GCTagList like iOS Mail app&#39;s sender or recivers tags.&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">screenshots</span>  <span class="o">=</span> <span class="s2">&quot;https://github.com/greenchiu/GCTagList/raw/master/Screenshot.png&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">homepage</span>     <span class="o">=</span> <span class="s2">&quot;https://github.com/greenchiu/GCTagList&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">license</span>      <span class="o">=</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s1">&#39;MIT License&#39;</span><span class="p">,</span> <span class="ss">:file</span> <span class="o">=&gt;</span> <span class="s1">&#39;LICENSE&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">author</span>       <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;greenchiu&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;handkid1986@gmail.com&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">source</span>       <span class="o">=</span> <span class="p">{</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s2">&quot;https://github.com/greenchiu/GCTagList.git&quot;</span><span class="p">,</span> <span class="ss">:tag</span> <span class="o">=&gt;</span> <span class="s2">&quot;0.1.1&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">platform</span>     <span class="o">=</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">&#39;5.0&#39;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">source_files</span> <span class="o">=</span> <span class="s1">&#39;GCTagList/classes/GCTagList.{h,m}&#39;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">resource</span>     <span class="o">=</span> <span class="s2">&quot;GCTagList/assets/CGTagLabelList.bundle&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">framework</span>    <span class="o">=</span> <span class="s1">&#39;QuartzCore&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>name</li>
<li>version</li>
<li>summary</li>
<li>homepage</li>
<li>license</li>
<li>author</li>
<li>source</li>
</ul>


<p>以上幾個部分是Spec裡面不能少的, 其他的可以依照你的需求來增加內容 ,更多的詳細資訊在這邊<a href="https://github.com/CocoaPods/CocoaPods/wiki/The-podspec-format">The-podspec-format</a></p>

<p>GCTagList只支援iOS5~6, 在<code>plaform</code>設定成 <code>ios, '5.0'</code>; 另外因為有assets所以在<code>resource</code>要指定assets的路徑, 路徑是依照專案的相對位置(不確定是不是github上的); <code>framework</code>同理, 如果有多個的話使用<code>frameworks</code>然後使用的framework用&#8221;,&#8221;隔開<code>'SystemConfiguration', 'CoreServices'</code> 。</p>

<p>在完成spec檔案後, 在使用指令來檢查spec是否有錯誤</p>

<figure class='code'><figcaption><span>檢查你的Spec </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pod spec lint GCTagList.podspec</span></code></pre></td></tr></table></div></figure>


<p>如果沒有錯誤會出現下面的內容 <br/>
<img src="http://greenchiu.github.io/images/blog/120409/03.png"></p>

<p>接下來,</p>

<ul>
<li>到<a href="https//github.com/CocoaPods/Specs">CocoaPods/Specs</a> fork一份新的Specs下來，並複製在本機端。(建議在提交前在fork, 避免覆蓋到其他人的內容)</li>
<li>在Spec建立Library的資料夾, 並將資料夾命名為Library的名稱。</li>
<li>依照提交的版本建立不同的資料夾, 資料夾命名為版本名稱, 在將Spec檔案放入。</li>
</ul>


<p>完成後的大該像下面這樣 <br/>
<img src="http://greenchiu.github.io/images/blog/120409/04.png"></p>

<p>在將修改玩的specs commot&amp;pusd到自己的github上, 然後在website點擊pull request來送出請求, 到這邊只要等待通知啦, 基本上spec有檢查的話應該就會直接通過了。 <br/>
<img src="http://greenchiu.github.io/images/blog/120409/05.png"></p>

<h2>最後</h2>

<p>在確定收到merge完成的通之後, 你可以在commond line更新本機端的spec檔案, 應該就可以搜尋到你的檔案啦~</p>

<p>如果你在使用的library在CocoaPods上找不到的話, 也是可以主動幫他建立一個spec檔, 主動提交上去如果過了就可以使用CocoaPods來管理囉。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITextView和UITextField的使用小技巧]]></title>
    <link href="http://greenchiu.github.io/blog/2013/03/31/uitextviewhe-uitextfieldde-shi-yong-xiao-ji-qiao/"/>
    <updated>2013-03-31T14:20:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2013/03/31/uitextviewhe-uitextfieldde-shi-yong-xiao-ji-qiao</id>
    <content type="html"><![CDATA[<blockquote><p>其實應該是要說UIResponder才對, 不過範圍好像大了點, 為了偷懶, 就只記錄最近開發過程一些使用的技巧。</p></blockquote>


<p></p>

<!--more-->


<p><img src="http://greenchiu.github.io/images/blog/0331/417206.jpg"><br/>
(via <a href="http://blog.fashionguide.com.tw/602/posts/38191-iDM">http://blog.fashionguide.com.tw/602/posts/38191-iDM</a>)</p>

<p>以上面的圖片內容作為參考, 在做這個畫面互動的時候, 我想我會用數個按鈕(UIButton)點下去後, 在將UIPickerView顯示出來, 最後再點擊完成將Picker的內容記錄下來並更新UIButton的title,這樣的作法以這個App來說應該已經足夠了。</p>

<p>But, 就是這個萬惡的But…</p>

<p>現在是一個比較複雜的輸入表單, 這個Layout有幾個內容會需要被填寫, Name、birthday和地址…等等, 這樣該怎麼辦?</p>

<ul>
<li>由一堆的UITextField(UITextView,文字內容較多使用)外加一堆Button來做的話</li>
<li>全部由UITextField &amp; UITextView 來做</li>
</ul>


<p>以上兩個方式都是可以去實現並且可行的, 關於第一點就不多說, 來說說第二點吧~</p>

<h2>UIResponder</h2>

<p>從Apple Developer Docs上的解釋是說這是處理事件(Events)的基本Class; UIView …etc.都是繼承自UIResponder, 不過今天不是專門提它的; 這邊先提一下在UIViewController要叫出UIPickerView要怎麼實作.</p>

<figure class='code'><figcaption><span>UIResponder&#8217;s method.   </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">canBecomeFirstResponder</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIView</span><span class="o">*</span><span class="p">)</span><span class="nf">inputView</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIView</span><span class="o">*</span><span class="p">)</span><span class="nf">inputAccessoryView</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在iPhone開發中, 如果要在UIViewController呼叫出UIPickerView, 會需要override <code>canBecomeFirstResponder</code> 跟 <code>inputView</code></p>

<figure class='code'><figcaption><span>@ViewController Require to override </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// UIViewController default is NO.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">canBecomeFirstResponder</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIView</span><span class="o">*</span><span class="p">)</span> <span class="nf">inputView</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[[</span><span class="n">UIPickerView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>讓Controller本身可以成為<code>FirstResponder</code>, 及成為FirstResponder時會呈現的<code>inputView</code>;</p>

<p>如果有需要一個ControlBar去控制inputView的話, 就覆寫<code>inputAccessoryView</code></p>

<figure class='code'><figcaption><span>add a toolbar for inputView</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIView</span><span class="o">*</span><span class="p">)</span> <span class="nf">inputAccessoryView</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[[</span><span class="n">UIToolbar</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>UITextField &amp; UITextView</h2>

<p>一般來說,當你Tapped UITextField(UITextView)時, 會顯示一個Keyboard; 這邊的Keyboard就是UITextField預設的inputView<code>(前面有提到UIView是繼承UIResponder)</code>。</p>

<p>在UITextField&amp;UITextView可以直接去Assign inputView &amp; inputAccessoryView, 如果要直接使用Keyboard就不用設定inputView。</p>

<figure class='code'><figcaption><span>UITextView & UITextField</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UITextField</span><span class="o">*</span> <span class="n">textField</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITextField</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">44</span><span class="p">)];</span>
</span><span class='line'><span class="n">textField</span><span class="p">.</span><span class="n">inputView</span> <span class="o">=</span> <span class="p">{</span><span class="n">your</span> <span class="n">inputView</span><span class="p">};</span>
</span><span class='line'><span class="n">textField</span><span class="p">.</span><span class="n">inputAccessoryView</span> <span class="o">=</span> <span class="p">{</span><span class="n">your</span> <span class="n">inputAccessoryView</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>特別一提的是, 如果你預設使用Keyboard(沒有設定inputView),並且設定inputAccessoryView的時候;觀察UIKeyboardWillShowNotication…etc.的通知, 系統會自動把inputAccessoryView的高度自動加上去&#8230;(一開始沒注意到害我自己debug半天找不到錯在哪)</p>

<p>用這樣的方式, 就可以輕鬆的去處理需要多個輸入但是要不同的inputView的狀況。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我在github的第一個Repo-GCTagList]]></title>
    <link href="http://greenchiu.github.io/blog/2013/03/19/my-first-repo-a-gctaglist-at-github/"/>
    <updated>2013-03-19T19:56:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2013/03/19/my-first-repo-a-gctaglist-at-github</id>
    <content type="html"><![CDATA[<p class='info info' data-title='News'>已經可以在CocoaPods & CocoaControls找到GCTagList<br/>使用上有任何建議或問題可以直接在github上給我建議, 謝謝</p>


<blockquote><p>在訂完今年的年度目標後, 除了正在並行的讀書會之外, 另一個就是在github上提交自己的lib; GCTagList 雖然內容很粗糙, 不過也算踏出了第一步, 希望之後會越來越好。</p></blockquote>


<p></p>

<!--more-->


<p>關於TagList, 一開始是因為專案上有這個需求, 希望可以像iPhone的Mail App的收件者或寄件者的tag list樣式; 不過在網路上找的lib大部分都要調整, 在維護上個人覺得不太方便, 加上專案之後要給別人維護, 如果這一塊寫的很醜之後很煩, 所以想了想就抓了一個來參考, 在依照需求來做設計, 整理出來就是GCTagList。</p>

<h2>GCTagList</h2>

<p>模仿iPhone&#8217;s Mail App中所呈現的tag list樣式</p>

<h3>特點</h3>

<p>taglist有幾個比較特殊的地方, 分別是:</p>

<h4>第一行支援LeftMargin</h4>

<p>主要是解決如果再Taglist前面會需要文字的話, 不會因為需要配合文字就限制住Taglist的寬度。</p>

<h4>最大行數</h4>

<p>當內容很多的時候, 可能因為list內的Taglabel過多造成行數過多(高度過高), 需要讓user一直捲動影響到App的操作。</p>

<h4>自動調整高度</h4>

<p>這就不多解釋了, 就是拿來Resize用 &#8230;</p>

<h4>ARC</h4>

<p>然後就是最近比較常使用的arc, 因為這次的專案支援arc, 所以是以arc為出發點在處理沒有支援arc的專案。</p>

<p>然後GCTagList一些想法是平時觀察UITableView的心得, 自己所做的一些實作, 所以Reuse跟identifire等東西相信有注意到的人應該都不陌生。(命名的方式也有一些雷同)</p>

<h3>使用方式</h3>

<p>在專案需要加入 <code>QuartzCore.frame</code>, 並加入 class &amp; assets的resoure bundle。</p>

<figure class='code'><figcaption><span>add taglist to your view </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">GCTagList</span><span class="o">*</span> <span class="n">taglist</span> <span class="o">=</span> <span class="p">[[</span><span class="n">GCTagList</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">320</span><span class="p">,</span> <span class="mi">200</span><span class="p">)];</span>
</span><span class='line'><span class="n">taglist</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="n">taglist</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>接著主要實作GCTagListDataSource的2個Mehtod</p>

<figure class='code'><figcaption><span>implemention GCTagListDataSource require method </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">numberOfTagLabelInTagList:</span><span class="p">(</span><span class="n">GCTagList</span> <span class="o">*</span><span class="p">)</span><span class="nv">tagList</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">GCTagLabel</span><span class="o">*</span><span class="p">)</span><span class="nf">tagList:</span><span class="p">(</span><span class="n">GCTagList</span> <span class="o">*</span><span class="p">)</span><span class="nv">tagList</span> <span class="nf">tagLabelAtIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後再呼叫CGTagList的<code>reloadData</code>。</p>

<figure class='code'><figcaption><span>let your tagist reloadData </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">taglist</span> <span class="n">reloadData</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>在與taglist的互動方面, 我也設計了2個方式點擊方式</p>

<ul>
<li>點擊TagLabel</li>
<li>點擊TagLabel&#8217;s accessoryButton</li>
</ul>


<p>可以在GCTagListDelegate找到對應的使用方式。</p>

<h3>後續的調整</h3>

<ul>
<li>區段性reload、insert和delete (嗯…就是要學)</li>
<li>客製化AccessoryButton</li>
<li>Taglist顏色的調整 … 是否要使用漸層等等</li>
</ul>


<p>目前想到的也就這些吧 … 有想法的可以一起討論一下</p>

<h3>Reference</h3>

<ul>
<li><a href="https://github.com/domness/DWTagList">DWTagList</a></li>
</ul>


<h2>之後</h2>

<p>有個小小的想法, 就是把他放到<a href="http://www.cocoacontrols.com/">cocoacontrols</a>跟<a href="http://cocoapods.org/">cocoapods</a>上 XD, 希望不會寫的太爛被打臉阿~</p>

<p>也要感謝一下馬克(我現在的PM)跟Eikiy(專案合作的創意)以及Jeremy(公司的大Boss), 給了很多的概念跟支援, 才會有這個lib的誕生.</p>

<p>最後附上github repo:<a href="https://github.com/greenchiu/GCTagList">GCTagList</a></p>

<h2>最近</h2>

<p>嗯, 小弟我把它丟上cocoacontrols了, 丟上去的方式還挺簡單的, 有兩種方式</p>

<ul>
<li>github account, 從github上抓取</li>
<li>其他方式</li>
</ul>


<p>我是使用github的方式, 將你的lib URL丟給它後它會抓一些基本的資訊, 然後會需要填一些內容&amp;keyword (for cocoacontrols search); 提交之後要等待審核(?, 會需要一段時間, 我大該排了一個禮拜吧, 如果沒問題它就會直接出現在cocoacontrol裡面啦~</p>

<p>今天下午也嘗試了提交到cocoapods, 不過不知道自己做的正不正確 … (Orz, 英文太破) … 如果有提交成功, 再來補充囉。</p>

<p>&#8211;</p>

<p>最後額外感謝<a href="https://twitter.com/aar0nTw">Aaron Haung</a>, 今天下午跟他詢問Roibbon p的效果該怎麼做, 沒想到他跟我說給我一小時, 我寫個外掛給你~真是揪甘心, 請受小弟一拜~</p>

<p>也附上<a href="https://github.com/aar0nTw/Ribbonp">網址</a>大家有需要可以去抓囉。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[建立Resource Bundle]]></title>
    <link href="http://greenchiu.github.io/blog/2013/02/28/xcode-create-resource-bundle/"/>
    <updated>2013-02-28T21:59:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2013/02/28/xcode-create-resource-bundle</id>
    <content type="html"><![CDATA[<p><img src="http://greenchiu.github.io/images/bundle_image.png"></p>

<blockquote><p>本篇介紹如合製作Resoure Bundle</p></blockquote>


<p></p>

<!--more-->


<p>開發iOS Application大該有兩年左右的時間了, 在使用外部的資源的時候常常看到*.bundle的檔案, 慢慢的就很好奇該如何製作一個resource bundle(Apple文件上稱為loadable bundles)檔案。上網查詢了一下，找到了一個很簡單的方式，跟大家分享。</p>

<p>首先在你專案的finder建立一個資料夾名稱就設定為appAssets.bundle(參考下圖) <br/>
<img src="http://greenchiu.github.io/images/bundles/bundle_01.png"></p>

<p>接著確認後會詢問你是否要加入.bundle的附檔名(不要懷疑給他按下去就對了)
<img src="http://greenchiu.github.io/images/bundles/bundle_02.png"></p>

<p>接著, 很神奇的就是你folder就會變成resource bundle的樣式
<img src="http://greenchiu.github.io/images/bundles/bundle_03.png"></p>

<p>接著下來, 將你想要放入的檔案(ex:xib,png … etc.)放入resource bundle中, 先對著appAssets.bundle右鍵顯示套件內容 <br/>
<img src="http://greenchiu.github.io/images/bundles/bundle_04.png"></p>

<p>加入你的檔案 <br/>
<img src="http://greenchiu.github.io/images/bundles/bundle_05.png"></p>

<p>這樣, 你的loadable bundle就製作完成了; 接著我們把他放入專案來使用, 加入專案後你可以展開appAssets.bundle的內容, 結構應該會跟上圖相同, 這樣就大功告成啦!
<img src="http://greenchiu.github.io/images/bundles/bundle_06.png"></p>

<p>最後使用bundle內部圖片</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;appAssets.bundle/images/blue_arrow.png&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後附上參考網址:<a href="http://www.applausible.com/blog/?p=703">Reference</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年度目標]]></title>
    <link href="http://greenchiu.github.io/blog/2013/02/13/2013nian-du-mu-biao/"/>
    <updated>2013-02-13T15:52:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2013/02/13/2013nian-du-mu-biao</id>
    <content type="html"><![CDATA[<blockquote><p>又過了一年了, 去年的這個時候在Nexdoor定了幾個年度目標, 不過達成率可能不到30%, 是還要精進的地方, 今年要在更確實的去落實並執行目標.</p></blockquote>


<!-- more -->


<p>今年比去年可能會些許的改變, 這次定的會降低一點, 並且依工作、個人、生活三個方面去設立目標.</p>

<h2>工作</h2>

<ul>
<li>Android Develop</li>
<li>Web前端 (Front End.)</li>
<li>Ruby on Rails</li>
</ul>


<p>今年工作方面除了本身的iOS外, 最重要的應該是Android開發的學習, 接下來Front End.跟RoR是自己打算學習的目標.</p>

<h2>個人</h2>

<ul>
<li>讀書會開滿十場</li>
<li>部落格10篇技術分享文</li>
<li>github提交3個開源程式碼</li>
</ul>


<p>讀書會部分是由我跟<a href="http://patw.idv.tw/">Patrick Wang</a>一起發起的讀書會, 主要是分享工作上的學習心得跟技術分享, 期待之後也可以把讀書會的內容分享出來.</p>

<h2>生活</h2>

<ul>
<li>帶柳丁出去玩+多陪陪家人</li>
<li>把烏克麗麗練好</li>
<li>跟朋友間安排活動出遊或交流</li>
</ul>


<p>上面是今年主要的目標啦, 當然還有些小目標像是多參加一些聚會充實知識跟各方面, 不過可能比較瑣碎就不多列出來了.</p>

<p>最後最後, 加油!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS開發Memo(0)]]></title>
    <link href="http://greenchiu.github.io/blog/2013/01/26/ioskai-fa-xiao-xin-de/"/>
    <updated>2013-01-26T15:01:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2013/01/26/ioskai-fa-xiao-xin-de</id>
    <content type="html"><![CDATA[<blockquote><p>在專案改組跟新專案的切換告一段落之後，終於又有時間繼續來更新了，順便把最近在專案上使用的工具稍微記錄一下。</p></blockquote>




<!--more-->


<h2>CocoaPods</h2>

<p>最近很紅用來管理Objective-C Project的第三方library工具, 主要是使用Ruby來進行安裝. 安裝使用的方式請參考官網<a href="http://cocoapods.org">Reference</a><br/>
OS X Mountain Lion無法安裝的排除方式: <a href="http://www.zlu.me/blog/2012/02/21/install-native-ruby-gem-in-mountain-lion-preview/">Install Native Ruby Gem in Mountain Lion Preview</a></p>

<h2>AppCooker + AppTasker</h2>

<p><img src="http://www.appcooker.com/wp-content/uploads/2012/09/App-Cooker-Header-Logo.png"></p>

<p>AppCooker是一個一個專門用來設計iOS App的Mockup or wireframe的工具.<br/>
主要的功能可以分成:</p>

<ul>
<li>Icon的紀錄 (不同版本).</li>
<li>App&#8217;s Mockup or wireframe.</li>
<li>在不同區域上線的文字描述與Keyword.</li>
<li>開發的花費＆收入.</li>
<li>輸出可以點擊的Prototype到其他裝有AppTasker的裝置上.</li>
</ul>


<p>不過AppCooker要價不便宜, 大概1190.NT (39.99鎂 <a href="http://www.appcooker.com">AppCooker.com</a></p>

<h2>Git-flow</h2>

<p>大家可以直接參考Aaron Huang的<a href="http://blog.buginception.com/blog/2012/10/13/recap-git-branching-model/">成功的 Git 分支模式</a></p>

<h2>Resizer</h2>

<p><img src="http://a4.mzstatic.com/us/r1000/078/Purple/v4/4a/70/27/4a702771-ecc7-273a-bfab-383e3c6fc388/Icon.175x175-75.png"> <a href="https://itunes.apple.com/us/app/resizer/id411277085?mt=12">itunes</a><br/>
將 Retina 使用的圖檔快速且完美地產生普通螢幕的圖檔尺寸(ex: iPad2 or iPhone3Gs)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[學徒模式-讀書心得]]></title>
    <link href="http://greenchiu.github.io/blog/2012/11/17/xue-tu-mo-shi-du-shu-xin-de/"/>
    <updated>2012-11-17T17:06:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2012/11/17/xue-tu-mo-shi-du-shu-xin-de</id>
    <content type="html"><![CDATA[<p><img src="http://greenchiu.github.io/images/IMG_2682.jpg" width="400"></p>

<blockquote><p>問題不在於征服一個未知的問題，而是一步一步，走出全新的路徑。</p><footer><strong>Gustav Mahler</strong> <cite>音樂家與作曲家</cite></footer></blockquote>


<!-- more -->


<p>第一次聽到這本書，是在 Nexdoor&#8217;s Study Meeting 由<a href="http://blog.buginception.com/">Aaron Hunang</a>分享的內容，當時雖然有一些想法，不過也沒有特別的去借來看看。最近這一段時間，自己面臨一些學習上的問題，就跑去天瓏書局買了這本書。</p>

<p>目前看了大該4/5吧，雖然有些翻譯覺得小小詭異，不過其實在這中間真的找到不少可以參考的方式，下面列出2個是我現在覺得很困擾我的問題。</p>

<h2>志趣相同的夥伴</h2>

<blockquote><p>沒有任何力量比得上由一群有才幹的人組成專注解決相關問題的社群。</p><footer><strong>Paul Graham</strong> <cite>駭客與畫家</cite></footer></blockquote>


<p>該怎麼說，我現在個工作環境，大家數的同伴，都是屬於Java的工程師，雖然也有一起努力的iOS工程師，但是可能因為在不同的Team討論的機會也不多，大多數的問題都是由自己在google或者是stackoverflow上查找自己的問題。</p>

<p>在書中有提到一個這種狀況的解決方案，就是找尋志趣相同的夥伴，找一個/或多個人一起討論或者是成立聚會或者是加入一些社群，都是一個很不錯的方向。所以我也決定要繼續在上班的時候多跟前同事<del>聊天</del>討論一些相關的問題，希望在工作跟友誼方面都會更進一步。(話說之前在WebGene的時候也常跟<a href="http://patw.idv.tw/blog/">Patrick Wang</a>討論問題)</p>

<h2>使用程式碼</h2>

<blockquote><p>準備最好的方式是寫程式，以及研究其他人所寫的偉大程式。<br/>以我為例，我走到資訊科學大樓外的垃圾桶，從裡面撈出他們作業系統的程式碼列表。</p><footer><strong>比爾蓋茲</strong> <cite>Programmers at Work</cite></footer></blockquote>


<p>練習跟找教學基本上大該是每天上班都會做的事情，但常常都覺得自己的進步太少，很多時候都是直接抓Third Party Libs直接使用，雖然在速度上快了不少，不過也錯失了很多進步的機會。</p>

<p>書上特別點出可以去看看別人提供的Libs，程式碼是如何寫的，透過閱讀別人的程式碼，學習別人的技巧與考慮的方向，配合版本控制，可以了解程式碼演進的過程。最後試著去比較自已與別人寫作的方式，可以找出自己的不足。</p>

<h2>最後最後 …</h2>

<p>雖然還有很多部分，是值得做分享的，不過還是建議可以跟別人借來閱讀一下，或者是去買一本來看，書名<a href="http://www.tenlong.com.tw/items/986276256X?item_id=338410">學徒模式－優秀軟體開發者的養成之路</a>，個人覺得很值得收藏。</p>

<p>雖然這次有點不知道算不算讀書心得 … 不過完成了第一本祭品，下一本就是半路叛逃啦，希望可以快一點看完在分享給大家囉。</p>

<p>如果內容上大家覺得有任何的問題或者是內容有缺失，也請指正或告知，謝謝。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[定個目標]]></title>
    <link href="http://greenchiu.github.io/blog/2012/11/11/ding-ge-mu-biao/"/>
    <updated>2012-11-11T19:22:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2012/11/11/ding-ge-mu-biao</id>
    <content type="html"><![CDATA[<p><img src="http://greenchiu.github.io/images/IMG_2652.jpg" width="400"></p>

<blockquote><p>在經過一段有點走入死胡同的時間後, 也開始決定逼迫自己來做一些事情; 可能我這個人就是欠扁吧 … 不給自己一些壓力就會一直死拖活拖的往後延, 因此決定為自己設定一些目標/方式, 讓自己有一個努力的方向或是強制的學習.</p></blockquote>


<!-- more -->


<p>剛換工作的那段時間, 一方面在努力熟悉新的工作環境, 一方面也期望自己可以做些什麼事情, 那時希望自己在PHP &amp; MySQL上可以有所進步, 也想要學Yii, 同時又很貪心的想要把Front-end的部份吃掉; 對自己有期望是好的, 但是在沒有做好優先權的設定跟一個完整的讀書計畫的結果, 就是一團遭 …</p>

<p>當然不可否認的是自己一次想要學習太多東西,在練習PHP後端的時候, 在寫後台呈現資料的時候我就又要求這邊的互動要做到怎樣怎樣, 明明今天設定要練習PHP的時間, 結果全部用到寫jQuery去了 … 類似這樣的狀況層出不窮 = =a</p>

<p>所以我今天就先定幾個目標</p>

<ul>
<li>每兩個禮拜的技術分享, 分享結束後都要Post一篇Blog, 至少做個Memo.</li>
<li>讀完書後, 要有讀書報告, 至少要有簡單的心得.</li>
<li>動腦會議感興趣的內容, 整理成一篇完整的內容在分享上來.</li>
</ul>


<p>嗯, 程式方面的技術分享可能會比較不定期, 就看最近有練習或研究什麼內容就在額外的分享吧.</p>

<p>另外, 這次的封面圖, 就是這篇文章的祭品啦 … 今天下午特地跑去天瓏買的, 目前先看學徒模式, 看完後再跟大家分享.</p>

<p>如果大家有什麼不錯的方式, 也分享給我囉, 謝謝.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello world.]]></title>
    <link href="http://greenchiu.github.io/blog/2012/11/10/hello-world/"/>
    <updated>2012-11-10T11:55:00+08:00</updated>
    <id>http://greenchiu.github.io/blog/2012/11/10/hello-world</id>
    <content type="html"><![CDATA[<p>Hi,  部落格在經過好長一段時間的起起伏伏後, 終於決定搬到page.github.com來, 在上一個<a href="http://greenchiou.blogspot.tw">部落格</a>當初有好常一段的時間沒有進行更新跟維護, 這算是個人的失職<del>絕對不是下班後打LoL打太兇關係</del>.</p>

<!-- more -->


<p>大該從兩個月前(我離開Nexdoor之後), 又開始興起繼續經營Blog的想法, 但是Blogger的Sayntx code的問題, 自己改了好多次都沒法很好的顯示(= =a雖然應該是自己太嫩的關係), 最後也是拖拖拉拉的繼續打電動去了 &#8230;</p>

<p>不過想想這樣下去也是拖一天過一天, 也下定決心要好好努力來寫Blog, 一方面是為自己定一個目標, 另一方面也強迫自己要努力去學習新的東西, 所以就開始了尋找適合自己的部落格.</p>

<p>印象中Aaron大跟我介紹過一個叫八爪章魚的東西, 所以也就有了這一個新的部落格的出現, 自己會在這邊分享一些學習的東西, 或是自己碰到的問題並且是如何解決. 可能也會有一些八竿子打不著的內容吧 = =a&#8230;</p>

<p>最後, 之前的內容應該不會搬移過來 &#8230; 大家有空常來逛, thx all.</p>
]]></content>
  </entry>
  
</feed>
